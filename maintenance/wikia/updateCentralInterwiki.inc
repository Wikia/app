<?php
/**
 * Rebuild interwiki table using the file on Central Wikia
 * adapted from MW's rebuildInterwiki.inc
 * @author Lucas 'TOR' Garczewski <tor@wikia.com>
 *
 * @todo document
 * @addtogroup Maintenance
 */

class Site {
	var $suffix, $lateral, $url;

	function __construct( $s, $l, $u ) {
		$this->suffix = $s;
		$this->lateral = $l;
		$this->url = $u;
	}

	function getURL( $lang ) {
		$xlang = str_replace( '_', '-', $lang );
		return "http://$xlang.{$this->url}/wiki/\$1";
	}
}

function getRebuildInterwikiSQL() {
	global $langlist, $languageAliases, $prefixRewrites, $wgWikiaTranscludableIWs;

	$transcludable = array('w','wikia','wikicities');
	if (!empty($wgWikiaTranscludableIWs)) {
		$transcludable = array_merge($transcludable, $wgWikiaTranscludableIWs);
	}

	# List of language prefixes likely to be found in multi-language sites
	# we don't use language prefixes here
	# FIX ME - do we have a language list?
	$langlist = array ();

	# Construct a list of reserved prefixes
	$reserved = array();
	foreach ( $langlist as $lang ) {
		$reserved[$lang] = 1;
	}

	# Extract the intermap from Central Wikia
	$intermap = Http::get( 'http://community.wikia.com/index.php?title=MediaWiki:Interwiki_map&action=raw', 30 );
	$lines = array_map( 'trim', explode( "\n", trim( $intermap ) ) );

	if ( !$lines || count( $lines ) < 2 ) {
		wfDie( "w:MediaWiki:Interwiki_map not found" );
	}

	// new format (FCK?), Feb 2010
	$data = array();
	$in_table = false;
	$row = 0;
	$offset = 0; // data offset: 0 - prefix (1st <td> line), 1 - url (2nd <td> line)
	foreach ($lines as $line) {
		if ($in_table) {
			if (preg_match("/^\|\}/", $line)) {
				$row++;
				$in_table = false;
				# echo "end: " . trim($line) . "\n";
			} elseif (preg_match("/^\|-/", $line)) {
				$row++;
				$offset = 0;
				# echo "break: " . trim($line) . "\n";
			} elseif (preg_match("/^\|(.*)$/", $line, $matches)) {
				$data[$row][$offset++] = trim($matches[1]);
				# echo "in: " . trim($line) . " stored as (" . $row . ", " . ($offset - 1) . ")\n";
			} else {
				# error?
				# echo "error?: " . trim($line) . "\n";
			}
		} elseif (preg_match("/^\{\|/", $line)) {
			$in_table = true;
			# echo "start: " . trim($line) . "\n";
		} else {
			# noise
			# echo "noise: " . trim($line) . "\n";
		}
	}
	// /end

	$iwArray = array();

	foreach ( $data as $line ) {
		list ($matches_1, $matches_2) = $line;
			$prefix = strtolower( $matches_1 );
			$url = $matches_2;
			if ( preg_match( '/(wowwiki.com|wikia.com|uncyclopedia.org|falloutvault.com)/', $url ) ) {
				$local = 1;
			} else {
				$local = 0;
			}

                        if (in_array($prefix, $transcludable)) {
                                $trans = 1;
                        } else {
				$trans = 0;
			}

			if ( empty( $reserved[$prefix] ) ) {
				$iwArray[$prefix] = array( "iw_prefix" => $prefix, "iw_url" => $url, "iw_local" => $local, 'iw_trans' => $trans );
			}
	}

	$sql = "-- Generated by updateCentralInterwiki.php\n";

	$sql .=	"REPLACE INTO interwiki (iw_prefix,iw_url,iw_local,iw_trans) VALUES\n";
	$first = true;

	$suffix = ''; // this is undefined in this script... legacy code from rebuildInterwiki.inc?
	$db     = ''; // this is undefined in this script... legacy code from rebuildInterwiki.inc?

	# Intermap links
	foreach ( $iwArray as $iwEntry ) {
	# Suppress links with the same name as the site
	if ( ( $suffix == 'wiki' && $iwEntry['iw_prefix'] != 'wikipedia' ) ||
	  ( $suffix != 'wiki' && $suffix != $iwEntry['iw_prefix'] ) )
		{
			$sql .= makeLink( $iwEntry, $first, $db );
		}
	}

	$sql .= ";\n\n";

	return $sql;
}

# ------------------------------------------------------------------------------------------

# Returns part of an INSERT statement, corresponding to all interlanguage links to a particular site
function makeLanguageLinks( &$site, &$first, $source ) {
	global $langlist, $languageAliases;

	$sql = "";

	# Actual languages with their own databases
	foreach ( $langlist as $targetLang ) {
		$sql .= makeLink( array( $targetLang, $site->getURL( $targetLang ), 1 ), $first, $source );
	}

	# Language aliases
	foreach ( $languageAliases as $alias => $lang ) {
		$sql .= makeLink( array( $alias, $site->getURL( $lang ), 1 ), $first, $source );
	}
	return $sql;
}

# Make SQL for a single link from an array
function makeLink( $entry, &$first, $source ) {
	global $prefixRewrites;

	if ( isset( $prefixRewrites[$source] ) && isset( $prefixRewrites[$source][$entry[0]] ) ) {
		$entry[0] = $prefixRewrites[$source][$entry[0]];
	}

	$sql = "";
	# Add comma
	if ( $first ) {
		$first = false;
	} else {
		$sql .= ",\n";
	}
	$dbr = wfGetDB( DB_SLAVE );
	$sql .= "(" . $dbr->makeList( $entry ) . ")";
	return $sql;
}

?>
