sections:
  - tag: table_admin
    name: Manipulating tables
    description: These commands allow table manipulation.
    order: 2

commands:
  - tag: table_create
    section: table_admin
    description: |
      Create a table. A RethinkDB table is a collection of JSON documents.
      <br /><br />If successful, the operation returns an object: <code>{created: 1}</code>.  If
      a table with the same name already exists, the operation throws <code>RqlRuntimeError</code>.
      <br /><br />When creating a table you can specify the following options:
      <ul>
      <li><code>primary_key</code>(string): the name of the primary key. The default primary key is <code>id</code>;</li>
      <li><code>hard_durability</code>(boolean): if set to <code>false</code>, this enables <strong>soft durability</strong>
       on this table: writes will be acknowledged by the server immediately and flushed to disk in the background. 
       Default is <code>true</code> (hard durability);</li>
      <li><code>cache_size</code>(number): set the cache size (in MB) to be used by the table. Default is 1024MB;</li>
      <li><code>datacenter</code>(string): the name of the datacenter this table should be assigned to.</li>
      </ul>
      <br /><br />In Javascript, these options can use either the underscore or camelcase form (e.g. primaryKey, hardDurability).

    body: tableName[, options]
    parent: db
    returns: json

    examples:
      - description: |
          Create a table named 'dc_universe' with the primary key set to field 'id'.
          If a new document doesn't contain the field 'id', the database will
          autogenerate a value for it.
        code: r.db('test').table_create('dc_universe').run(conn)
      - description: |
          Create a table named 'dc_universe' using the field 'name'
          as primary key.
        code:
          py: r.db('test').table_create('dc_universe', primary_key='name').run(conn)
          rb: r.db('test').table_create('dc_universe', :primary_key => 'name').run(conn)
          ph: r\db('test')->tableCreate('dc_universe', array('primary_key' => 'name'))->run($conn);
      - description: |
          Create a table to log the very fast actions of the heroes.
        code:
          py: r.db('test').table_create('hero_actions', hard_durability=False).run(conn)
          rb: r.db('test').table_create('dc_universe', :hard_durability => false).run(conn)
          ph: r\db('test')->tableCreate('dc_universe', array('hard_durability' => false))->run($conn);

    ph:
      name: tableCreate
      body: tableName[, array(option1 => value1, option2 => value2, ...)]
      examples:
        0:
          code: r\db('test')->tableCreate('dc_universe')->run($conn);

    js:
      name: tableCreate
      examples:
        0:
          code: r.db('test').tableCreate('dc_universe').run(conn, callback)
          can_try: true
          dataset: marvel
        1:
          code: r.db('test').tableCreate('dc_universe', {primaryKey:'name'}).run(conn, callback)
          can_try: true
          dataset: marvel
        2:
          code: r.db('test').tableCreate('dc_universe', {hardDurability:false}).run(conn, callback)
          can_try: true
          dataset: marvel

  - tag: table_drop
    section: table_admin
    description: |
      Drop a table. The table and all its data will be deleted.<br /><br
      />If succesful, the operation returns an object: <code>{dropped: 1}</code>.
      If the specified table doesn''t exist a <code>RqlRuntimeError</code> is thrown.

    body: table_name
    parent: db
    returns: json

    examples:
      - description: Drop a table named 'dc_universe'.
        code: r.db('test').table_drop('dc_universe').run(conn)
        
    ph:
      name: tableDrop
      body: tableName
      examples:
        0:
          code: r\db('test')->tableDrop('dc_universe')->run($conn);

    js:
      name: tableDrop
      body: tableName
      examples:
        0:
          code: r.db('test').tableDrop('dc_universe').run(conn, callback)
          can_try: true
          dataset: marvel

  - tag: table_list
    section: table_admin
    description: | 
      List all table names in a database.<br /><br />
      The result is a list of strings.

    parent: db
    returns: sequence

    examples:
      - description: List all tables of the 'test' database.
        code: r.db('test').table_list().run(conn)
        
    ph:
      name: tableList
      examples:
        0:
          code: r\db('test')->tableList()->run($conn);

    js:
      name: tableList
      examples:
        0:
          code: r.db('test').tableList().run(conn, callback)
          can_try: true
          dataset: marvel

    rb:
      dont_need_parenthesis: true

  - tag: index_create
    section: table_admin
    description: Create a new secondary index on this table.

    body:
      py: index_name[, index_function]
      js: indexName[, indexFunction]
      rb: index_name[, index_function]
      ph: indexName[, indexFunction]
    parent: table
    returns: json

    examples:
      - description: |
          To efficiently query our heros by name we can create a secondary
          index based on the value of that field. We can already quickly query
          heros by name with the primary index but to do the same based on hero
          code names we'll have to create a secondary index based on that
          attribute.
        code:
          py: "r.table('dc').index_create('code_name').run(conn)"
          js: r.table('dc').indexCreate('code_name').run(conn, callback)
          rb: r.table('dc').index_create('code_name').run(conn)
          ph: r\table('dc')->indexCreate('code_name')->run($conn);
      - description: |
          You can also create a secondary index based on an arbitrary function
          on the document.
        code:
          py: |
            r.table('dc').index_create('power_rating',
              lambda hero: hero['combat_power'] + (2 * hero['compassion_power'])
            ).run(conn)
          js: |
            r.table('dc').indexCreate('power_rating', function(hero) {
              return hero('combat_power').add(hero('compassion_power').mul(2));
            }).run(conn, callback)
          rb: |
            r.table('dc').index_create('power_rating') {|hero|
              hero['combat_power'] + (2 * hero['compassion_power'])
            }.run(conn)
          ph: |
            r\table('dc')->indexCreate('power_rating', function($hero) {
                return $hero('combat_power')->add($hero('compassion_power')->mul(2));
              })->run($conn);
      - description: |
          A compound index can be created by returning an array of values to
          use as the secondary index key.
        code:
          py: |
            r.table('dc').index_create('parental_planets',
              lambda hero: [hero['mothers_home_planet'], hero['fathers_home_planet']]
            ).run(conn)
          js: |
            r.table('dc').indexCreate('parental_planets', function(hero) {
              return [hero('mothers_home_planet'), hero('fathers_home_planet')];
            }).run(conn, callback)
          rb: |
            r.table('dc').index_create('parental_planets') {|hero|
              [hero['mothers_home_planet'], hero['fathers_home_planet']]
            }.run(conn)
          ph: |
            r\table('dc')->indexCreate('parental_planets', function($hero) {
                return r\expr(array($hero('mothers_home_planet'), $hero('fathers_home_planet')));
              })->run($conn);

    js:
      name: indexCreate
    ph:
      name: indexCreate

  - tag: index_drop
    section: table_admin
    description: Delete a previously created secondary index of this table.

    body: indexName
    parent: table
    returns: json

    examples:
      - description: Drop a secondary index named 'code_name'.
        code: r.table('dc').index_drop('code_name').run(conn)

    js:
      name: indexDrop
      examples:
        0:
          code: r.table('dc').indexDrop('code_name').run(conn, callback)
          
    ph:
      name: indexDrop
      examples:
        0:
          code: r\table('dc')->indexDrop('code_name')->run($conn);

  - tag: index_list
    section: table_admin
    description: List all the secondary indexes of this table.

    parent: table
    returns: json

    examples:
      - description: List the available secondary indexes for this table.
        code: r.table('marvel').index_list()

    js:
      name: indexList
      examples:
        0:
          code: r.table('dc').indexList()
          
    ph:
      name: indexList
      examples:
        0:
          code: r\table('dc')->indexList()->run($conn);
