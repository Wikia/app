<?php
/**
 * NotificationsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * on-site-notifications
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\OnSiteNotifications\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * NotificationsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NotificationsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/on-site-notifications');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return NotificationsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getNotifications
     *
     * Get notifications for user
     *
     * @param string[] $site_id  (optional)
     * @param string $starting_timestamp  (optional)
     * @param int $limit  (optional, default to 10)
     * @param int $page  (optional, default to 1)
     * @return \Swagger\Client\OnSiteNotifications\Models\NotificationResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getNotifications($site_id = null, $starting_timestamp = null, $limit = null, $page = null)
    {
        list($response) = $this->getNotificationsWithHttpInfo($site_id, $starting_timestamp, $limit, $page);
        return $response;
    }

    /**
     * Operation getNotificationsWithHttpInfo
     *
     * Get notifications for user
     *
     * @param string[] $site_id  (optional)
     * @param string $starting_timestamp  (optional)
     * @param int $limit  (optional, default to 10)
     * @param int $page  (optional, default to 1)
     * @return Array of \Swagger\Client\OnSiteNotifications\Models\NotificationResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getNotificationsWithHttpInfo($site_id = null, $starting_timestamp = null, $limit = null, $page = null)
    {
        // parse inputs
        $resourcePath = "/notifications";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if (is_array($site_id)) {
            $site_id = $this->apiClient->getSerializer()->serializeCollection($site_id, 'multi', true);
        }
        if ($site_id !== null) {
            $queryParams['siteId'] = $this->apiClient->getSerializer()->toQueryValue($site_id);
        }
        // query params
        if ($starting_timestamp !== null) {
            $queryParams['startingTimestamp'] = $this->apiClient->getSerializer()->toQueryValue($starting_timestamp);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\OnSiteNotifications\Models\NotificationResponse',
                '/notifications'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\OnSiteNotifications\Models\NotificationResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\OnSiteNotifications\Models\NotificationResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUnreadCount
     *
     * 
     *
     * @param string[] $site_id  (optional)
     * @param string $starting_timestamp  (optional)
     * @param int $limit  (optional, default to 10)
     * @param int $page  (optional, default to 1)
     * @return \Swagger\Client\OnSiteNotifications\Models\UnreadCountResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getUnreadCount($site_id = null, $starting_timestamp = null, $limit = null, $page = null)
    {
        list($response) = $this->getUnreadCountWithHttpInfo($site_id, $starting_timestamp, $limit, $page);
        return $response;
    }

    /**
     * Operation getUnreadCountWithHttpInfo
     *
     * 
     *
     * @param string[] $site_id  (optional)
     * @param string $starting_timestamp  (optional)
     * @param int $limit  (optional, default to 10)
     * @param int $page  (optional, default to 1)
     * @return Array of \Swagger\Client\OnSiteNotifications\Models\UnreadCountResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getUnreadCountWithHttpInfo($site_id = null, $starting_timestamp = null, $limit = null, $page = null)
    {
        // parse inputs
        $resourcePath = "/notifications/unread-count";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if (is_array($site_id)) {
            $site_id = $this->apiClient->getSerializer()->serializeCollection($site_id, 'multi', true);
        }
        if ($site_id !== null) {
            $queryParams['siteId'] = $this->apiClient->getSerializer()->toQueryValue($site_id);
        }
        // query params
        if ($starting_timestamp !== null) {
            $queryParams['startingTimestamp'] = $this->apiClient->getSerializer()->toQueryValue($starting_timestamp);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\OnSiteNotifications\Models\UnreadCountResponse',
                '/notifications/unread-count'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\OnSiteNotifications\Models\UnreadCountResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\OnSiteNotifications\Models\UnreadCountResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation markAllNotificationsAsRead
     *
     * Marks all notifications as read for a user
     *
     * @param string $since  (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function markAllNotificationsAsRead($since = null)
    {
        list($response) = $this->markAllNotificationsAsReadWithHttpInfo($since);
        return $response;
    }

    /**
     * Operation markAllNotificationsAsReadWithHttpInfo
     *
     * Marks all notifications as read for a user
     *
     * @param string $since  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function markAllNotificationsAsReadWithHttpInfo($since = null)
    {
        // parse inputs
        $resourcePath = "/notifications/mark-all-as-read";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/notifications/mark-all-as-read'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation markNotificationsAsReadByUri
     *
     * Marks notifications as read for a user by uri
     *
     * @param string[] $body  (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function markNotificationsAsReadByUri($body = null)
    {
        list($response) = $this->markNotificationsAsReadByUriWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation markNotificationsAsReadByUriWithHttpInfo
     *
     * Marks notifications as read for a user by uri
     *
     * @param string[] $body  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function markNotificationsAsReadByUriWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/notifications/mark-as-read/by-uri";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/notifications/mark-as-read/by-uri'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
