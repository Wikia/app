<?php
/**
 * UserPreferencesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\User\Preferences\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * UserPreferencesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserPreferencesApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/user-preference');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return UserPreferencesApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteUserPreferences
     *
     * deletes all of a user's preferences
     *
     * @param string $user_id The id of the user whose preferences are to be deleted (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteUserPreferences($user_id)
    {
        list($response) = $this->deleteUserPreferencesWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation deleteUserPreferencesWithHttpInfo
     *
     * deletes all of a user's preferences
     *
     * @param string $user_id The id of the user whose preferences are to be deleted (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteUserPreferencesWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling deleteUserPreferences');
        }
        // parse inputs
        $resourcePath = "/{userId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/{userId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getGlobalUserPreferenceByName
     *
     * Returns single specific global preference for specific user
     *
     * @param string $user_id The Id of the user whose preference will be returned (required)
     * @param string $preference_name The name of preference whose value will be returned (required)
     * @return \Swagger\Client\User\Preferences\Models\GlobalPreference
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getGlobalUserPreferenceByName($user_id, $preference_name)
    {
        list($response) = $this->getGlobalUserPreferenceByNameWithHttpInfo($user_id, $preference_name);
        return $response;
    }

    /**
     * Operation getGlobalUserPreferenceByNameWithHttpInfo
     *
     * Returns single specific global preference for specific user
     *
     * @param string $user_id The Id of the user whose preference will be returned (required)
     * @param string $preference_name The name of preference whose value will be returned (required)
     * @return Array of \Swagger\Client\User\Preferences\Models\GlobalPreference, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getGlobalUserPreferenceByNameWithHttpInfo($user_id, $preference_name)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getGlobalUserPreferenceByName');
        }
        // verify the required parameter 'preference_name' is set
        if ($preference_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $preference_name when calling getGlobalUserPreferenceByName');
        }
        // parse inputs
        $resourcePath = "/{userId}/global/{preferenceName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($preference_name !== null) {
            $resourcePath = str_replace(
                "{" . "preferenceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($preference_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\User\Preferences\Models\GlobalPreference',
                '/{userId}/global/{preferenceName}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\User\Preferences\Models\GlobalPreference', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\User\Preferences\Models\GlobalPreference', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\User\Preferences\Models\Problem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLocalUserPreferenceByName
     *
     * Returns single specific local preference for specific user
     *
     * @param string $user_id The Id of the user whose preference will be returned (required)
     * @param int $wiki_id The Id of the wiki for which preference will be returned (required)
     * @param string $preference_name The name of preference whose value will be returned (required)
     * @return \Swagger\Client\User\Preferences\Models\LocalPreference
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getLocalUserPreferenceByName($user_id, $wiki_id, $preference_name)
    {
        list($response) = $this->getLocalUserPreferenceByNameWithHttpInfo($user_id, $wiki_id, $preference_name);
        return $response;
    }

    /**
     * Operation getLocalUserPreferenceByNameWithHttpInfo
     *
     * Returns single specific local preference for specific user
     *
     * @param string $user_id The Id of the user whose preference will be returned (required)
     * @param int $wiki_id The Id of the wiki for which preference will be returned (required)
     * @param string $preference_name The name of preference whose value will be returned (required)
     * @return Array of \Swagger\Client\User\Preferences\Models\LocalPreference, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getLocalUserPreferenceByNameWithHttpInfo($user_id, $wiki_id, $preference_name)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getLocalUserPreferenceByName');
        }
        // verify the required parameter 'wiki_id' is set
        if ($wiki_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wiki_id when calling getLocalUserPreferenceByName');
        }
        // verify the required parameter 'preference_name' is set
        if ($preference_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $preference_name when calling getLocalUserPreferenceByName');
        }
        // parse inputs
        $resourcePath = "/{userId}/local/{preferenceName}/wikia/{wikiId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($wiki_id !== null) {
            $resourcePath = str_replace(
                "{" . "wikiId" . "}",
                $this->apiClient->getSerializer()->toPathValue($wiki_id),
                $resourcePath
            );
        }
        // path params
        if ($preference_name !== null) {
            $resourcePath = str_replace(
                "{" . "preferenceName" . "}",
                $this->apiClient->getSerializer()->toPathValue($preference_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\User\Preferences\Models\LocalPreference',
                '/{userId}/local/{preferenceName}/wikia/{wikiId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\User\Preferences\Models\LocalPreference', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\User\Preferences\Models\LocalPreference', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\User\Preferences\Models\Problem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUserPreferences
     *
     * Returns all the global user preferences for a user
     *
     * @param string $user_id The id of the user to list the preferences (required)
     * @return \Swagger\Client\User\Preferences\Models\UserPreferences
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getUserPreferences($user_id)
    {
        list($response) = $this->getUserPreferencesWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation getUserPreferencesWithHttpInfo
     *
     * Returns all the global user preferences for a user
     *
     * @param string $user_id The id of the user to list the preferences (required)
     * @return Array of \Swagger\Client\User\Preferences\Models\UserPreferences, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getUserPreferencesWithHttpInfo($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling getUserPreferences');
        }
        // parse inputs
        $resourcePath = "/{userId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\User\Preferences\Models\UserPreferences',
                '/{userId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\User\Preferences\Models\UserPreferences', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\User\Preferences\Models\UserPreferences', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\User\Preferences\Models\Problem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setUserPreferences
     *
     * set a user's preferences. note - this deletes preferences not in the provided list.
     *
     * @param string $user_id The id of the user whose preferences are to be set (required)
     * @param \Swagger\Client\User\Preferences\Models\UserPreferences $user_preferences The user&#39;s preferences (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function setUserPreferences($user_id, $user_preferences)
    {
        list($response) = $this->setUserPreferencesWithHttpInfo($user_id, $user_preferences);
        return $response;
    }

    /**
     * Operation setUserPreferencesWithHttpInfo
     *
     * set a user's preferences. note - this deletes preferences not in the provided list.
     *
     * @param string $user_id The id of the user whose preferences are to be set (required)
     * @param \Swagger\Client\User\Preferences\Models\UserPreferences $user_preferences The user&#39;s preferences (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function setUserPreferencesWithHttpInfo($user_id, $user_preferences)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling setUserPreferences');
        }
        // verify the required parameter 'user_preferences' is set
        if ($user_preferences === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_preferences when calling setUserPreferences');
        }
        // parse inputs
        $resourcePath = "/{userId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($user_preferences)) {
            $_tempBody = $user_preferences;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/{userId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\User\Preferences\Models\Problem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
