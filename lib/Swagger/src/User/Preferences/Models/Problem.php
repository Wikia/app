<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 *
 */

namespace Swagger\Client\User\Preferences\Models;

use \ArrayAccess;

class Problem implements ArrayAccess {
  /** @var string[] Array of property to type mappings. Used for (de)serialization */
  static $swaggerTypes = array(
      'title' => 'string',
      'status' => 'int',
      'type' => 'string',
      'detail' => 'string',
      'instance' => 'string'
  );

  /** @var string[] Array of attributes where the key is the local name, and the value is the original name */
  static $attributeMap = array(
      'title' => 'title',
      'status' => 'status',
      'type' => 'type',
      'detail' => 'detail',
      'instance' => 'instance'
  );

  /** @var string[] Array of attributes to setter functions (for deserialization of responses) */
  static $setters = array(
    'title' => 'setTitle',
    'status' => 'setStatus',
    'type' => 'setType',
    'detail' => 'setDetail',
    'instance' => 'setInstance'
  );

  /** @var string[] Array of attributes to getter functions (for serialization of requests) */
  static $getters = array(
    'title' => 'getTitle',
    'status' => 'getStatus',
    'type' => 'getType',
    'detail' => 'getDetail',
    'instance' => 'getInstance'
  );

  
  /** @var string $title */
  protected $title;
  
  /** @var int $status */
  protected $status;
  
  /** @var string $type */
  protected $type;
  
  /** @var string $detail */
  protected $detail;
  
  /** @var string $instance */
  protected $instance;
  
  public function __construct(array $data = null) {
    if ($data != null) {
      $this->title = $data["title"];
      $this->status = $data["status"];
      $this->type = $data["type"];
      $this->detail = $data["detail"];
      $this->instance = $data["instance"];
    }
  }
  
  /**
   * get title
   * @return string
   */
  public function getTitle() {
    return $this->title;
  }

  /**
   * set title
   * @param string $title
   * @return $this
   */
  public function setTitle($title) {
    $this->title = $title;
    return $this;
  }
  
  /**
   * get status
   * @return int
   */
  public function getStatus() {
    return $this->status;
  }

  /**
   * set status
   * @param int $status
   * @return $this
   */
  public function setStatus($status) {
    $this->status = $status;
    return $this;
  }
  
  /**
   * get type
   * @return string
   */
  public function getType() {
    return $this->type;
  }

  /**
   * set type
   * @param string $type
   * @return $this
   */
  public function setType($type) {
    $this->type = $type;
    return $this;
  }
  
  /**
   * get detail
   * @return string
   */
  public function getDetail() {
    return $this->detail;
  }

  /**
   * set detail
   * @param string $detail
   * @return $this
   */
  public function setDetail($detail) {
    $this->detail = $detail;
    return $this;
  }
  
  /**
   * get instance
   * @return string
   */
  public function getInstance() {
    return $this->instance;
  }

  /**
   * set instance
   * @param string $instance
   * @return $this
   */
  public function setInstance($instance) {
    $this->instance = $instance;
    return $this;
  }
  
  public function offsetExists($offset) {
    return isset($this->$offset);
  }

  public function offsetGet($offset) {
    return $this->$offset;
  }

  public function offsetSet($offset, $value) {
    $this->$offset = $value;
  }

  public function offsetUnset($offset) {
    unset($this->$offset);
  }

  public function __toString() {
    if (defined('JSON_PRETTY_PRINT')) {
      return json_encode($this, JSON_PRETTY_PRINT);
    } else {
      return json_encode($this);
    }
  }
}
