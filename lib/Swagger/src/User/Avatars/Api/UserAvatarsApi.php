<?php
/**
 * UserAvatarsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\User\Avatars\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;
use Wikia\Service\Constants;

/**
 * UserAvatarsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserAvatarsApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct( $apiClient = null )
    {
        if ( $apiClient == null ) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost( 'https://localhost/' );
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return UserAvatarsApi
     */
    public function setApiClient( ApiClient $apiClient )
    {
        $this->apiClient = $apiClient;
        return $this;
    }


    /**
     * getAvatarForUser
     *
     * Get an user avatar
     *
     * @param int $user_id  (required)
     * @param string $if_none_match  (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAvatarForUser( $user_id, $if_none_match = null )
    {

        // verify the required parameter 'user_id' is set
        if ( $user_id === null ) {
            throw new \InvalidArgumentException( 'Missing the required parameter $user_id when calling getAvatarForUser' );
        }

        // parse inputs
        $resourcePath = "/user/{userId}/avatar";
        $resourcePath = str_replace( "{format}", "json", $resourcePath );
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType( array() );


        // header params
        if ( $if_none_match !== null ) {
            $headerParams['If-None-Match'] = $this->apiClient->getSerializer()->toHeaderValue( $if_none_match );
        }
        // path params
        if ( $user_id !== null ) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue( $user_id ),
                $resourcePath
            );
        }



        // for model (json/xml)
        if ( isset( $_tempBody ) ) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if ( count( $formParams ) > 0 ) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list( $response, $httpHeader ) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
        } catch ( ApiException $e ) {
            switch ( $e->getCode() ) {
            }

            throw $e;
        }

		return $response;
    }

    /**
     * updateOrCreateUserAvatar
     *
     * Create an avatar for a user, potentially overwriting any existing one
     *
     * @param int $user_id  (required)
	 * @param array $_tempBody  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateOrCreateUserAvatar( $user_id, $_tempBody )
    {

        // verify the required parameter 'user_id' is set
        if ( $user_id === null ) {
            throw new \InvalidArgumentException( 'Missing the required parameter $user_id when calling updateOrCreateUserAvatar' );
        }

        // parse inputs
        $resourcePath = "/user/{userId}/avatar";
        $resourcePath = str_replace( "{format}", "json", $resourcePath );
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType( array( 'multipart/form-data' ) );
		$headerParams[Constants::HELIOS_AUTH_HEADER] = $user_id;



        // path params
        if ( $user_id !== null ) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue( $user_id ),
                $resourcePath
            );
        }



        // for model (json/xml)
        if ( isset( $_tempBody ) ) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if ( count( $formParams ) > 0 ) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list( $response, $httpHeader ) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
        } catch ( ApiException $e ) {
            switch ( $e->getCode() ) {
            }

            throw $e;
        }

		return $response;

    }

    /**
     * createUserAvatar
     *
     * Create an avatar for a user (only if it does not exist yet)
     *
     * @param int $user_id  (required)
	 * @param array $_tempBody  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createUserAvatar( $user_id, $_tempBody )
    {

        // verify the required parameter 'user_id' is set
        if ( $user_id === null ) {
            throw new \InvalidArgumentException( 'Missing the required parameter $user_id when calling createUserAvatar' );
        }

        // parse inputs
        $resourcePath = "/user/{userId}/avatar";
        $resourcePath = str_replace( "{format}", "json", $resourcePath );
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType( array( 'multipart/form-data' ) );
		$headerParams[Constants::HELIOS_AUTH_HEADER] = $user_id;



        // path params
        if ( $user_id !== null ) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue( $user_id ),
                $resourcePath
            );
        }



        // for model (json/xml)
        if ( isset( $_tempBody ) ) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if ( count( $formParams ) > 0 ) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list( $response, $httpHeader ) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
        } catch ( ApiException $e ) {
            switch ( $e->getCode() ) {
            }

            throw $e;
        }

		return $response;

    }

    /**
     * deleteUserAvatar
     *
     * Delete the users avatar
     *
     * @param int $user_id  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteUserAvatar( $user_id )
    {

        // verify the required parameter 'user_id' is set
        if ( $user_id === null ) {
            throw new \InvalidArgumentException( 'Missing the required parameter $user_id when calling deleteUserAvatar' );
        }

        // parse inputs
        $resourcePath = "/user/{userId}/avatar";
        $resourcePath = str_replace( "{format}", "json", $resourcePath );
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType( array( 'multipart/form-data' ) );
		$headerParams[Constants::HELIOS_AUTH_HEADER] = $user_id;



        // path params
        if ( $user_id !== null ) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue( $user_id ),
                $resourcePath
            );
        }



        // for model (json/xml)
        if ( isset( $_tempBody ) ) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if ( count( $formParams ) > 0 ) {
            $httpBody = $formParams; // for HTTP post (form)
        }

        // make the API Call
        try
        {
            list( $response, $httpHeader ) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
        } catch ( ApiException $e ) {
            switch ( $e->getCode() ) {
            }

            throw $e;
        }

		return $response;

    }

}
