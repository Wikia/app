<?php
/**
 * StoriesFeedApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * curation-cms
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.1-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\CurationCMS\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * StoriesFeedApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoriesFeedApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return StoriesFeedApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getMainFeed
     *
     * Get main feed
     *
     * @param int $limit  (optional, default to 10)
     * @param int $page  (optional, default to 1)
     * @param string $story_slug  (optional)
     * @param string $paging_timestamp  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\CurationCMS\Models\FeedResponse
     */
    public function getMainFeed($limit = '10', $page = '1', $story_slug = null, $paging_timestamp = null)
    {
        list($response) = $this->getMainFeedWithHttpInfo($limit, $page, $story_slug, $paging_timestamp);
        return $response;
    }

    /**
     * Operation getMainFeedWithHttpInfo
     *
     * Get main feed
     *
     * @param int $limit  (optional, default to 10)
     * @param int $page  (optional, default to 1)
     * @param string $story_slug  (optional)
     * @param string $paging_timestamp  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\CurationCMS\Models\FeedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMainFeedWithHttpInfo($limit = '10', $page = '1', $story_slug = null, $paging_timestamp = null)
    {
        // parse inputs
        $resourcePath = "/stories/feed/main";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json; charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($story_slug !== null) {
            $queryParams['storySlug'] = $this->apiClient->getSerializer()->toQueryValue($story_slug);
        }
        // query params
        if ($paging_timestamp !== null) {
            $queryParams['pagingTimestamp'] = $this->apiClient->getSerializer()->toQueryValue($paging_timestamp);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\CurationCMS\Models\FeedResponse',
                '/stories/feed/main'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\CurationCMS\Models\FeedResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\CurationCMS\Models\FeedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMockFeed
     *
     * [TEMPORARY] get prototype feed for client development
     *
     * @param int $limit  (optional, default to 10)
     * @param int $page  (optional, default to 1)
     * @param string $story_slug  (optional)
     * @param string $paging_timestamp  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\CurationCMS\Models\FeedResponse
     */
    public function getMockFeed($limit = '10', $page = '1', $story_slug = null, $paging_timestamp = null)
    {
        list($response) = $this->getMockFeedWithHttpInfo($limit, $page, $story_slug, $paging_timestamp);
        return $response;
    }

    /**
     * Operation getMockFeedWithHttpInfo
     *
     * [TEMPORARY] get prototype feed for client development
     *
     * @param int $limit  (optional, default to 10)
     * @param int $page  (optional, default to 1)
     * @param string $story_slug  (optional)
     * @param string $paging_timestamp  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\CurationCMS\Models\FeedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMockFeedWithHttpInfo($limit = '10', $page = '1', $story_slug = null, $paging_timestamp = null)
    {
        // parse inputs
        $resourcePath = "/stories/feed/mocked";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json; charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($story_slug !== null) {
            $queryParams['storySlug'] = $this->apiClient->getSerializer()->toQueryValue($story_slug);
        }
        // query params
        if ($paging_timestamp !== null) {
            $queryParams['pagingTimestamp'] = $this->apiClient->getSerializer()->toQueryValue($paging_timestamp);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\CurationCMS\Models\FeedResponse',
                '/stories/feed/mocked'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\CurationCMS\Models\FeedResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\CurationCMS\Models\FeedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPersonalFeed
     *
     * Get the personal feed for the current user
     *
     * @param int $limit  (optional, default to 10)
     * @param int $page  (optional, default to 1)
     * @param string $story_slug  (optional)
     * @param string $paging_timestamp  (optional)
     * @param \Swagger\Client\CurationCMS\Models\AuthenticatedUser $body  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\CurationCMS\Models\FeedResponse
     */
    public function getPersonalFeed($limit = '10', $page = '1', $story_slug = null, $paging_timestamp = null, $body = null)
    {
        list($response) = $this->getPersonalFeedWithHttpInfo($limit, $page, $story_slug, $paging_timestamp, $body);
        return $response;
    }

    /**
     * Operation getPersonalFeedWithHttpInfo
     *
     * Get the personal feed for the current user
     *
     * @param int $limit  (optional, default to 10)
     * @param int $page  (optional, default to 1)
     * @param string $story_slug  (optional)
     * @param string $paging_timestamp  (optional)
     * @param \Swagger\Client\CurationCMS\Models\AuthenticatedUser $body  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\CurationCMS\Models\FeedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonalFeedWithHttpInfo($limit = '10', $page = '1', $story_slug = null, $paging_timestamp = null, $body = null)
    {
        // parse inputs
        $resourcePath = "/stories/feed/personal";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json; charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($story_slug !== null) {
            $queryParams['storySlug'] = $this->apiClient->getSerializer()->toQueryValue($story_slug);
        }
        // query params
        if ($paging_timestamp !== null) {
            $queryParams['pagingTimestamp'] = $this->apiClient->getSerializer()->toQueryValue($paging_timestamp);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\CurationCMS\Models\FeedResponse',
                '/stories/feed/personal'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\CurationCMS\Models\FeedResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\CurationCMS\Models\FeedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTopicFeed
     *
     * Get single topic feed
     *
     * @param string $slug  (required)
     * @param int $limit  (optional, default to 10)
     * @param int $page  (optional, default to 1)
     * @param string $story_slug  (optional)
     * @param string $paging_timestamp  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\CurationCMS\Models\FeedResponse
     */
    public function getTopicFeed($slug, $limit = '10', $page = '1', $story_slug = null, $paging_timestamp = null)
    {
        list($response) = $this->getTopicFeedWithHttpInfo($slug, $limit, $page, $story_slug, $paging_timestamp);
        return $response;
    }

    /**
     * Operation getTopicFeedWithHttpInfo
     *
     * Get single topic feed
     *
     * @param string $slug  (required)
     * @param int $limit  (optional, default to 10)
     * @param int $page  (optional, default to 1)
     * @param string $story_slug  (optional)
     * @param string $paging_timestamp  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\CurationCMS\Models\FeedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTopicFeedWithHttpInfo($slug, $limit = '10', $page = '1', $story_slug = null, $paging_timestamp = null)
    {
        // verify the required parameter 'slug' is set
        if ($slug === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slug when calling getTopicFeed');
        }
        // parse inputs
        $resourcePath = "/stories/feed/slug/{slug}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json; charset=UTF-8']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($story_slug !== null) {
            $queryParams['storySlug'] = $this->apiClient->getSerializer()->toQueryValue($story_slug);
        }
        // query params
        if ($paging_timestamp !== null) {
            $queryParams['pagingTimestamp'] = $this->apiClient->getSerializer()->toQueryValue($paging_timestamp);
        }
        // path params
        if ($slug !== null) {
            $resourcePath = str_replace(
                "{" . "slug" . "}",
                $this->apiClient->getSerializer()->toPathValue($slug),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\CurationCMS\Models\FeedResponse',
                '/stories/feed/slug/{slug}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\CurationCMS\Models\FeedResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\CurationCMS\Models\FeedResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
