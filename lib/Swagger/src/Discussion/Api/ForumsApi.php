<?php
/**
 * ForumsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * discussion
 *
 * OpenAPI spec version: 0.1-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Discussion\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * ForumsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ForumsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/discussion');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ForumsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createForum
     *
     * Create a new forum for a site
     *
     * @param int $site_id The id of the site (required)
     * @param \Swagger\Client\Discussion\Models\ForumInput $forum_input Forum input json (required)
     * @return \Swagger\Client\Discussion\Models\ForumHalResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createForum($site_id, $forum_input)
    {
        list($response) = $this->createForumWithHttpInfo($site_id, $forum_input);
        return $response;
    }

    /**
     * Operation createForumWithHttpInfo
     *
     * Create a new forum for a site
     *
     * @param int $site_id The id of the site (required)
     * @param \Swagger\Client\Discussion\Models\ForumInput $forum_input Forum input json (required)
     * @return Array of \Swagger\Client\Discussion\Models\ForumHalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createForumWithHttpInfo($site_id, $forum_input)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling createForum');
        }
        // verify the required parameter 'forum_input' is set
        if ($forum_input === null) {
            throw new \InvalidArgumentException('Missing the required parameter $forum_input when calling createForum');
        }
        // parse inputs
        $resourcePath = "/{siteId}/forums";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($forum_input)) {
            $_tempBody = $forum_input;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\ForumHalResponse',
                '/{siteId}/forums'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\ForumHalResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\ForumHalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteForum
     *
     * Delete a forum and move its threads to another forum
     *
     * @param int $site_id The id of the site (required)
     * @param int $forum_id The id of forum to delete (required)
     * @param \Swagger\Client\Discussion\Models\MoveForumInput $body The forum to house the threads under the forum being deleted (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteForum($site_id, $forum_id, $body)
    {
        list($response) = $this->deleteForumWithHttpInfo($site_id, $forum_id, $body);
        return $response;
    }

    /**
     * Operation deleteForumWithHttpInfo
     *
     * Delete a forum and move its threads to another forum
     *
     * @param int $site_id The id of the site (required)
     * @param int $forum_id The id of forum to delete (required)
     * @param \Swagger\Client\Discussion\Models\MoveForumInput $body The forum to house the threads under the forum being deleted (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteForumWithHttpInfo($site_id, $forum_id, $body)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling deleteForum');
        }
        // verify the required parameter 'forum_id' is set
        if ($forum_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $forum_id when calling deleteForum');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling deleteForum');
        }
        // parse inputs
        $resourcePath = "/{siteId}/forums/{forumId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($forum_id !== null) {
            $resourcePath = str_replace(
                "{" . "forumId" . "}",
                $this->apiClient->getSerializer()->toPathValue($forum_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/{siteId}/forums/{forumId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getContributors
     *
     * Get a list of unique contributors to the forum.
     *
     * @param int $site_id The id of the site (required)
     * @param string $forum_id The id of a specific forum (required)
     * @param int $limit The number of unique users to return (optional, default to 10)
     * @param bool $viewable_only viewableOnly (optional, default to true)
     * @return \Swagger\Client\Discussion\Models\ForumHalResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getContributors($site_id, $forum_id, $limit = null, $viewable_only = null)
    {
        list($response) = $this->getContributorsWithHttpInfo($site_id, $forum_id, $limit, $viewable_only);
        return $response;
    }

    /**
     * Operation getContributorsWithHttpInfo
     *
     * Get a list of unique contributors to the forum.
     *
     * @param int $site_id The id of the site (required)
     * @param string $forum_id The id of a specific forum (required)
     * @param int $limit The number of unique users to return (optional, default to 10)
     * @param bool $viewable_only viewableOnly (optional, default to true)
     * @return Array of \Swagger\Client\Discussion\Models\ForumHalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getContributorsWithHttpInfo($site_id, $forum_id, $limit = null, $viewable_only = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling getContributors');
        }
        // verify the required parameter 'forum_id' is set
        if ($forum_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $forum_id when calling getContributors');
        }
        // parse inputs
        $resourcePath = "/{siteId}/forums/{forumId}/contributors";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($viewable_only !== null) {
            $queryParams['viewableOnly'] = $this->apiClient->getSerializer()->toQueryValue($viewable_only);
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($forum_id !== null) {
            $resourcePath = str_replace(
                "{" . "forumId" . "}",
                $this->apiClient->getSerializer()->toPathValue($forum_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\ForumHalResponse',
                '/{siteId}/forums/{forumId}/contributors'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\ForumHalResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\ForumHalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getForum
     *
     * Get a specific forum for a site
     *
     * @param int $site_id The id of the site (required)
     * @param string $forum_id The id of a specific forum (required)
     * @param string $sort_key The sort key by which threads are ordered (optional, default to creation_date)
     * @param string $sort_direction The sort direction for which sort key applies to thread list order (optional)
     * @param int $limit The number of threads to return (optional, default to 10)
     * @param int $page The pagination position (optional, default to 0)
     * @param string $pivot Pagination pivot id - the id of the thread which represents the originfor all page offset calculations (optional)
     * @param string $response_group The responseGroup controls the level of details returned with this call (optional, default to small)
     * @param bool $viewable_only viewableOnly (optional, default to true)
     * @return \Swagger\Client\Discussion\Models\ForumHalResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getForum($site_id, $forum_id, $sort_key = null, $sort_direction = null, $limit = null, $page = null, $pivot = null, $response_group = null, $viewable_only = null)
    {
        list($response) = $this->getForumWithHttpInfo($site_id, $forum_id, $sort_key, $sort_direction, $limit, $page, $pivot, $response_group, $viewable_only);
        return $response;
    }

    /**
     * Operation getForumWithHttpInfo
     *
     * Get a specific forum for a site
     *
     * @param int $site_id The id of the site (required)
     * @param string $forum_id The id of a specific forum (required)
     * @param string $sort_key The sort key by which threads are ordered (optional, default to creation_date)
     * @param string $sort_direction The sort direction for which sort key applies to thread list order (optional)
     * @param int $limit The number of threads to return (optional, default to 10)
     * @param int $page The pagination position (optional, default to 0)
     * @param string $pivot Pagination pivot id - the id of the thread which represents the originfor all page offset calculations (optional)
     * @param string $response_group The responseGroup controls the level of details returned with this call (optional, default to small)
     * @param bool $viewable_only viewableOnly (optional, default to true)
     * @return Array of \Swagger\Client\Discussion\Models\ForumHalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getForumWithHttpInfo($site_id, $forum_id, $sort_key = null, $sort_direction = null, $limit = null, $page = null, $pivot = null, $response_group = null, $viewable_only = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling getForum');
        }
        // verify the required parameter 'forum_id' is set
        if ($forum_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $forum_id when calling getForum');
        }
        // parse inputs
        $resourcePath = "/{siteId}/forums/{forumId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($sort_key !== null) {
            $queryParams['sortKey'] = $this->apiClient->getSerializer()->toQueryValue($sort_key);
        }
        // query params
        if ($sort_direction !== null) {
            $queryParams['sortDirection'] = $this->apiClient->getSerializer()->toQueryValue($sort_direction);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($pivot !== null) {
            $queryParams['pivot'] = $this->apiClient->getSerializer()->toQueryValue($pivot);
        }
        // query params
        if ($response_group !== null) {
            $queryParams['responseGroup'] = $this->apiClient->getSerializer()->toQueryValue($response_group);
        }
        // query params
        if ($viewable_only !== null) {
            $queryParams['viewableOnly'] = $this->apiClient->getSerializer()->toQueryValue($viewable_only);
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($forum_id !== null) {
            $resourcePath = str_replace(
                "{" . "forumId" . "}",
                $this->apiClient->getSerializer()->toPathValue($forum_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\ForumHalResponse',
                '/{siteId}/forums/{forumId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\ForumHalResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\ForumHalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getForums
     *
     * Returns all the forums for a site
     *
     * @param int $site_id The id of the site (required)
     * @param string $response_group The responseGroup controls the level of details returned with this call (optional, default to small)
     * @param bool $viewable_only viewableOnly (optional, default to true)
     * @return \Swagger\Client\Discussion\Models\ForumHalResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getForums($site_id, $response_group = null, $viewable_only = null)
    {
        list($response) = $this->getForumsWithHttpInfo($site_id, $response_group, $viewable_only);
        return $response;
    }

    /**
     * Operation getForumsWithHttpInfo
     *
     * Returns all the forums for a site
     *
     * @param int $site_id The id of the site (required)
     * @param string $response_group The responseGroup controls the level of details returned with this call (optional, default to small)
     * @param bool $viewable_only viewableOnly (optional, default to true)
     * @return Array of \Swagger\Client\Discussion\Models\ForumHalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getForumsWithHttpInfo($site_id, $response_group = null, $viewable_only = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling getForums');
        }
        // parse inputs
        $resourcePath = "/{siteId}/forums";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($response_group !== null) {
            $queryParams['responseGroup'] = $this->apiClient->getSerializer()->toQueryValue($response_group);
        }
        // query params
        if ($viewable_only !== null) {
            $queryParams['viewableOnly'] = $this->apiClient->getSerializer()->toQueryValue($viewable_only);
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\ForumHalResponse',
                '/{siteId}/forums'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\ForumHalResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\ForumHalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation moveThreadsIntoForum
     *
     * Move threads into a forum
     *
     * @param int $site_id The id of the site (required)
     * @param int $forum_id The id of the destination forum (required)
     * @param \Swagger\Client\Discussion\Models\MoveThreadsInput $thread_id_list List of thread ids to move to destination forum (required)
     * @return \Swagger\Client\Discussion\Models\HalResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function moveThreadsIntoForum($site_id, $forum_id, $thread_id_list)
    {
        list($response) = $this->moveThreadsIntoForumWithHttpInfo($site_id, $forum_id, $thread_id_list);
        return $response;
    }

    /**
     * Operation moveThreadsIntoForumWithHttpInfo
     *
     * Move threads into a forum
     *
     * @param int $site_id The id of the site (required)
     * @param int $forum_id The id of the destination forum (required)
     * @param \Swagger\Client\Discussion\Models\MoveThreadsInput $thread_id_list List of thread ids to move to destination forum (required)
     * @return Array of \Swagger\Client\Discussion\Models\HalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function moveThreadsIntoForumWithHttpInfo($site_id, $forum_id, $thread_id_list)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling moveThreadsIntoForum');
        }
        // verify the required parameter 'forum_id' is set
        if ($forum_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $forum_id when calling moveThreadsIntoForum');
        }
        // verify the required parameter 'thread_id_list' is set
        if ($thread_id_list === null) {
            throw new \InvalidArgumentException('Missing the required parameter $thread_id_list when calling moveThreadsIntoForum');
        }
        // parse inputs
        $resourcePath = "/{siteId}/forums/{forumId}/movethreads";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($forum_id !== null) {
            $resourcePath = str_replace(
                "{" . "forumId" . "}",
                $this->apiClient->getSerializer()->toPathValue($forum_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($thread_id_list)) {
            $_tempBody = $thread_id_list;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\HalResponse',
                '/{siteId}/forums/{forumId}/movethreads'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\HalResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateForum
     *
     * Partial forum update only allows name/description
     *
     * @param int $site_id The id of the site of the forums to update (required)
     * @param int $forum_id The id of the forum to update (required)
     * @param \Swagger\Client\Discussion\Models\EditForumInput $edit_forum_input Forum input json (required)
     * @return \Swagger\Client\Discussion\Models\ForumHalResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateForum($site_id, $forum_id, $edit_forum_input)
    {
        list($response) = $this->updateForumWithHttpInfo($site_id, $forum_id, $edit_forum_input);
        return $response;
    }

    /**
     * Operation updateForumWithHttpInfo
     *
     * Partial forum update only allows name/description
     *
     * @param int $site_id The id of the site of the forums to update (required)
     * @param int $forum_id The id of the forum to update (required)
     * @param \Swagger\Client\Discussion\Models\EditForumInput $edit_forum_input Forum input json (required)
     * @return Array of \Swagger\Client\Discussion\Models\ForumHalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateForumWithHttpInfo($site_id, $forum_id, $edit_forum_input)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling updateForum');
        }
        // verify the required parameter 'forum_id' is set
        if ($forum_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $forum_id when calling updateForum');
        }
        // verify the required parameter 'edit_forum_input' is set
        if ($edit_forum_input === null) {
            throw new \InvalidArgumentException('Missing the required parameter $edit_forum_input when calling updateForum');
        }
        // parse inputs
        $resourcePath = "/{siteId}/forums/{forumId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($forum_id !== null) {
            $resourcePath = str_replace(
                "{" . "forumId" . "}",
                $this->apiClient->getSerializer()->toPathValue($forum_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($edit_forum_input)) {
            $_tempBody = $edit_forum_input;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\ForumHalResponse',
                '/{siteId}/forums/{forumId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\ForumHalResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\ForumHalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateForumDisplayOrder
     *
     * Update the Forum's display order
     *
     * @param int $site_id The id of the site of the forum to change the display order (required)
     * @param \Swagger\Client\Discussion\Models\ForumDisplayOrder $forum_display_order Full or partial List of forum ids in order of which they should be displayed (required)
     * @return \Swagger\Client\Discussion\Models\ForumDisplayOrder
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateForumDisplayOrder($site_id, $forum_display_order)
    {
        list($response) = $this->updateForumDisplayOrderWithHttpInfo($site_id, $forum_display_order);
        return $response;
    }

    /**
     * Operation updateForumDisplayOrderWithHttpInfo
     *
     * Update the Forum's display order
     *
     * @param int $site_id The id of the site of the forum to change the display order (required)
     * @param \Swagger\Client\Discussion\Models\ForumDisplayOrder $forum_display_order Full or partial List of forum ids in order of which they should be displayed (required)
     * @return Array of \Swagger\Client\Discussion\Models\ForumDisplayOrder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateForumDisplayOrderWithHttpInfo($site_id, $forum_display_order)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling updateForumDisplayOrder');
        }
        // verify the required parameter 'forum_display_order' is set
        if ($forum_display_order === null) {
            throw new \InvalidArgumentException('Missing the required parameter $forum_display_order when calling updateForumDisplayOrder');
        }
        // parse inputs
        $resourcePath = "/{siteId}/forums/displayorder";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($forum_display_order)) {
            $_tempBody = $forum_display_order;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\ForumDisplayOrder',
                '/{siteId}/forums/displayorder'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\ForumDisplayOrder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\ForumDisplayOrder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
