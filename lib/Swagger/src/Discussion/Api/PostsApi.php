<?php
/**
 * PostsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * discussion
 *
 * OpenAPI spec version: 0.1-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Discussion\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * PostsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/discussion');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return PostsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createPost
     *
     * Create a new post
     *
     * @param int $site_id The id of the site (required)
     * @param \Swagger\Client\Discussion\Models\PostInput $post_input Post input json (required)
     * @return \Swagger\Client\Discussion\Models\PostHalResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createPost($site_id, $post_input)
    {
        list($response) = $this->createPostWithHttpInfo($site_id, $post_input);
        return $response;
    }

    /**
     * Operation createPostWithHttpInfo
     *
     * Create a new post
     *
     * @param int $site_id The id of the site (required)
     * @param \Swagger\Client\Discussion\Models\PostInput $post_input Post input json (required)
     * @return Array of \Swagger\Client\Discussion\Models\PostHalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createPostWithHttpInfo($site_id, $post_input)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling createPost');
        }
        // verify the required parameter 'post_input' is set
        if ($post_input === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_input when calling createPost');
        }
        // parse inputs
        $resourcePath = "/{siteId}/posts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($post_input)) {
            $_tempBody = $post_input;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\PostHalResponse',
                '/{siteId}/posts'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\PostHalResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\PostHalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\PostHalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePost
     *
     * Delete a post from a site
     *
     * @param int $site_id The id of the site (required)
     * @param string $post_id The id of a specific post (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deletePost($site_id, $post_id)
    {
        list($response) = $this->deletePostWithHttpInfo($site_id, $post_id);
        return $response;
    }

    /**
     * Operation deletePostWithHttpInfo
     *
     * Delete a post from a site
     *
     * @param int $site_id The id of the site (required)
     * @param string $post_id The id of a specific post (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deletePostWithHttpInfo($site_id, $post_id)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling deletePost');
        }
        // verify the required parameter 'post_id' is set
        if ($post_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_id when calling deletePost');
        }
        // parse inputs
        $resourcePath = "/{siteId}/posts/{postId}/delete";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($post_id !== null) {
            $resourcePath = str_replace(
                "{" . "postId" . "}",
                $this->apiClient->getSerializer()->toPathValue($post_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/{siteId}/posts/{postId}/delete'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAllPosts
     *
     * A list of all posts
     *
     * @param int $param_site_id The id of the site (required)
     * @param bool $reported Show reported posts? (optional, default to false)
     * @param int $limit The number of results to return with this call (optional, default to 10)
     * @param int $page The pagination position (optional, default to 0)
     * @param bool $viewable_only Whether to show only visible posts or visible plus deleted posts (optional, default to true)
     * @param int $pivot Pagination pivot id - the id of the post which represents the origin for all page offset calculations (optional)
     * @param string $since Date since (optional)
     * @param string $since2 Date until (optional)
     * @return \Swagger\Client\Discussion\Models\PostHalResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllPosts($param_site_id, $reported = null, $limit = null, $page = null, $viewable_only = null, $pivot = null, $since = null, $since2 = null)
    {
        list($response) = $this->getAllPostsWithHttpInfo($param_site_id, $reported, $limit, $page, $viewable_only, $pivot, $since, $since2);
        return $response;
    }

    /**
     * Operation getAllPostsWithHttpInfo
     *
     * A list of all posts
     *
     * @param int $param_site_id The id of the site (required)
     * @param bool $reported Show reported posts? (optional, default to false)
     * @param int $limit The number of results to return with this call (optional, default to 10)
     * @param int $page The pagination position (optional, default to 0)
     * @param bool $viewable_only Whether to show only visible posts or visible plus deleted posts (optional, default to true)
     * @param int $pivot Pagination pivot id - the id of the post which represents the origin for all page offset calculations (optional)
     * @param string $since Date since (optional)
     * @param string $since2 Date until (optional)
     * @return Array of \Swagger\Client\Discussion\Models\PostHalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllPostsWithHttpInfo($param_site_id, $reported = null, $limit = null, $page = null, $viewable_only = null, $pivot = null, $since = null, $since2 = null)
    {
        // verify the required parameter 'param_site_id' is set
        if ($param_site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $param_site_id when calling getAllPosts');
        }
        // parse inputs
        $resourcePath = "/{siteId}/posts";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($reported !== null) {
            $queryParams['reported'] = $this->apiClient->getSerializer()->toQueryValue($reported);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($viewable_only !== null) {
            $queryParams['viewableOnly'] = $this->apiClient->getSerializer()->toQueryValue($viewable_only);
        }
        // query params
        if ($pivot !== null) {
            $queryParams['pivot'] = $this->apiClient->getSerializer()->toQueryValue($pivot);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since);
        }
        // query params
        if ($since2 !== null) {
            $queryParams['since'] = $this->apiClient->getSerializer()->toQueryValue($since2);
        }
        // path params
        if ($param_site_id !== null) {
            $resourcePath = str_replace(
                "{" . "PARAM_SITE_ID" . "}",
                $this->apiClient->getSerializer()->toPathValue($param_site_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\PostHalResponse',
                '/{siteId}/posts'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\PostHalResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\PostHalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPost
     *
     * Get a specific post for a site
     *
     * @param int $site_id The id of the site (required)
     * @param string $post_id The id of a specific post (required)
     * @param string $response_group The responseGroup controls the level of details returned with this call (optional, default to small)
     * @param bool $viewable_only Whether to show only visible posts or visible plus deleted posts (optional, default to true)
     * @return \Swagger\Client\Discussion\Models\PostHalResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPost($site_id, $post_id, $response_group = null, $viewable_only = null)
    {
        list($response) = $this->getPostWithHttpInfo($site_id, $post_id, $response_group, $viewable_only);
        return $response;
    }

    /**
     * Operation getPostWithHttpInfo
     *
     * Get a specific post for a site
     *
     * @param int $site_id The id of the site (required)
     * @param string $post_id The id of a specific post (required)
     * @param string $response_group The responseGroup controls the level of details returned with this call (optional, default to small)
     * @param bool $viewable_only Whether to show only visible posts or visible plus deleted posts (optional, default to true)
     * @return Array of \Swagger\Client\Discussion\Models\PostHalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getPostWithHttpInfo($site_id, $post_id, $response_group = null, $viewable_only = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling getPost');
        }
        // verify the required parameter 'post_id' is set
        if ($post_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_id when calling getPost');
        }
        // parse inputs
        $resourcePath = "/{siteId}/posts/{postId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($response_group !== null) {
            $queryParams['responseGroup'] = $this->apiClient->getSerializer()->toQueryValue($response_group);
        }
        // query params
        if ($viewable_only !== null) {
            $queryParams['viewableOnly'] = $this->apiClient->getSerializer()->toQueryValue($viewable_only);
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($post_id !== null) {
            $resourcePath = str_replace(
                "{" . "postId" . "}",
                $this->apiClient->getSerializer()->toPathValue($post_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\PostHalResponse',
                '/{siteId}/posts/{postId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\PostHalResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\PostHalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation lockPost
     *
     * Lock this post
     *
     * @param int $site_id The id of the site (required)
     * @param string $post_id The id of a specific post (required)
     * @return \Swagger\Client\Discussion\Models\PostHalResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function lockPost($site_id, $post_id)
    {
        list($response) = $this->lockPostWithHttpInfo($site_id, $post_id);
        return $response;
    }

    /**
     * Operation lockPostWithHttpInfo
     *
     * Lock this post
     *
     * @param int $site_id The id of the site (required)
     * @param string $post_id The id of a specific post (required)
     * @return Array of \Swagger\Client\Discussion\Models\PostHalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function lockPostWithHttpInfo($site_id, $post_id)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling lockPost');
        }
        // verify the required parameter 'post_id' is set
        if ($post_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_id when calling lockPost');
        }
        // parse inputs
        $resourcePath = "/{siteId}/posts/{postId}/lock";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($post_id !== null) {
            $resourcePath = str_replace(
                "{" . "postId" . "}",
                $this->apiClient->getSerializer()->toPathValue($post_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\PostHalResponse',
                '/{siteId}/posts/{postId}/lock'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\PostHalResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\PostHalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\PostHalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation undeletePost
     *
     * Un-delete a post in a site
     *
     * @param int $site_id The id of the site (required)
     * @param string $post_id The id of a specific post (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function undeletePost($site_id, $post_id)
    {
        list($response) = $this->undeletePostWithHttpInfo($site_id, $post_id);
        return $response;
    }

    /**
     * Operation undeletePostWithHttpInfo
     *
     * Un-delete a post in a site
     *
     * @param int $site_id The id of the site (required)
     * @param string $post_id The id of a specific post (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function undeletePostWithHttpInfo($site_id, $post_id)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling undeletePost');
        }
        // verify the required parameter 'post_id' is set
        if ($post_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_id when calling undeletePost');
        }
        // parse inputs
        $resourcePath = "/{siteId}/posts/{postId}/undelete";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($post_id !== null) {
            $resourcePath = str_replace(
                "{" . "postId" . "}",
                $this->apiClient->getSerializer()->toPathValue($post_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/{siteId}/posts/{postId}/undelete'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation unlockPost
     *
     * Unlock this post
     *
     * @param int $site_id The id of the site (required)
     * @param string $post_id The id of a specific post (required)
     * @return \Swagger\Client\Discussion\Models\PostHalResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function unlockPost($site_id, $post_id)
    {
        list($response) = $this->unlockPostWithHttpInfo($site_id, $post_id);
        return $response;
    }

    /**
     * Operation unlockPostWithHttpInfo
     *
     * Unlock this post
     *
     * @param int $site_id The id of the site (required)
     * @param string $post_id The id of a specific post (required)
     * @return Array of \Swagger\Client\Discussion\Models\PostHalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function unlockPostWithHttpInfo($site_id, $post_id)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling unlockPost');
        }
        // verify the required parameter 'post_id' is set
        if ($post_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_id when calling unlockPost');
        }
        // parse inputs
        $resourcePath = "/{siteId}/posts/{postId}/unlock";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($post_id !== null) {
            $resourcePath = str_replace(
                "{" . "postId" . "}",
                $this->apiClient->getSerializer()->toPathValue($post_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\PostHalResponse',
                '/{siteId}/posts/{postId}/unlock'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\PostHalResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\PostHalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\PostHalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePost
     *
     * Update a post
     *
     * @param int $site_id The id of the site (required)
     * @param int $post_id The id of the post (required)
     * @param \Swagger\Client\Discussion\Models\PostUpdateInput $post_update_input Post input json (required)
     * @return \Swagger\Client\Discussion\Models\PostHalResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updatePost($site_id, $post_id, $post_update_input)
    {
        list($response) = $this->updatePostWithHttpInfo($site_id, $post_id, $post_update_input);
        return $response;
    }

    /**
     * Operation updatePostWithHttpInfo
     *
     * Update a post
     *
     * @param int $site_id The id of the site (required)
     * @param int $post_id The id of the post (required)
     * @param \Swagger\Client\Discussion\Models\PostUpdateInput $post_update_input Post input json (required)
     * @return Array of \Swagger\Client\Discussion\Models\PostHalResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updatePostWithHttpInfo($site_id, $post_id, $post_update_input)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling updatePost');
        }
        // verify the required parameter 'post_id' is set
        if ($post_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_id when calling updatePost');
        }
        // verify the required parameter 'post_update_input' is set
        if ($post_update_input === null) {
            throw new \InvalidArgumentException('Missing the required parameter $post_update_input when calling updatePost');
        }
        // parse inputs
        $resourcePath = "/{siteId}/posts/{postId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/hal+json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($post_id !== null) {
            $resourcePath = str_replace(
                "{" . "postId" . "}",
                $this->apiClient->getSerializer()->toPathValue($post_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($post_update_input)) {
            $_tempBody = $post_update_input;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\PostHalResponse',
                '/{siteId}/posts/{postId}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\PostHalResponse', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\PostHalResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
