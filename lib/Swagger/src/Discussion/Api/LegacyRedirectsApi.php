<?php
/**
 * LegacyRedirectsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * discussion
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.10-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Discussion\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * LegacyRedirectsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LegacyRedirectsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return LegacyRedirectsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getForumRedirect
     *
     * Legacy Board to Discussion Forum
     *
     * @param int $site_id The id of the site (required)
     * @param int $board_id Legacy Forum board ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Discussion\Models\LegacyRedirectResponse
     */
    public function getForumRedirect($site_id, $board_id)
    {
        list($response) = $this->getForumRedirectWithHttpInfo($site_id, $board_id);
        return $response;
    }

    /**
     * Operation getForumRedirectWithHttpInfo
     *
     * Legacy Board to Discussion Forum
     *
     * @param int $site_id The id of the site (required)
     * @param int $board_id Legacy Forum board ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Discussion\Models\LegacyRedirectResponse, HTTP status code,
     * HTTP response headers (array of strings)
     */
    public function getForumRedirectWithHttpInfo($site_id, $board_id)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling getForumRedirect');
        }
        // verify the required parameter 'board_id' is set
        if ($board_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $board_id when calling getForumRedirect');
        }
        // parse inputs
        $resourcePath = "/{siteId}/redirect/board/{boardId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/hal+json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($board_id !== null) {
            $resourcePath = str_replace(
                "{" . "boardId" . "}",
                $this->apiClient->getSerializer()->toPathValue($board_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\LegacyRedirectResponse',
                '/{siteId}/redirect/board/{boardId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\LegacyRedirectResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
	                    '\Swagger\Client\Discussion\Models\LegacyRedirectResponse',
	                    $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
	                    '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getThreadRedirect
     *
     * Legacy Thread to Discussion Thread
     *
     * @param int $site_id The id of the site (required)
     * @param int $thread_id Legacy Forum thread ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Discussion\Models\LegacyRedirectResponse
     */
    public function getThreadRedirect($site_id, $thread_id)
    {
        list($response) = $this->getThreadRedirectWithHttpInfo($site_id, $thread_id);
        return $response;
    }

    /**
     * Operation getThreadRedirectWithHttpInfo
     *
     * Legacy Thread to Discussion Thread
     *
     * @param int $site_id The id of the site (required)
     * @param int $thread_id Legacy Forum thread ID (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Discussion\Models\LegacyRedirectResponse, HTTP status code,
     * HTTP response headers (array of strings)
     */
    public function getThreadRedirectWithHttpInfo($site_id, $thread_id)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling getThreadRedirect');
        }
        // verify the required parameter 'thread_id' is set
        if ($thread_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $thread_id when calling getThreadRedirect');
        }
        // parse inputs
        $resourcePath = "/{siteId}/redirect/thread/{threadId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/hal+json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($thread_id !== null) {
            $resourcePath = str_replace(
                "{" . "threadId" . "}",
                $this->apiClient->getSerializer()->toPathValue($thread_id),
                $resourcePath
            );
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-AccessToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-AccessToken'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-Wikia-UserId');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-Wikia-UserId'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Discussion\Models\LegacyRedirectResponse',
                '/{siteId}/redirect/thread/{threadId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Discussion\Models\LegacyRedirectResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
	                    '\Swagger\Client\Discussion\Models\LegacyRedirectResponse',
	                    $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
	                    '\Swagger\Client\Discussion\Models\HalProblem', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
