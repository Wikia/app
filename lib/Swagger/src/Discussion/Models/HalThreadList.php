<?php
/**
 * HalThreadList
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Discussion\Models;

use \ArrayAccess;

/**
 * HalThreadList Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HalThreadList implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'HalThreadList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'is_requester_blocked' => 'bool',
        'post_count' => 'int',
        'requester_id' => 'string',
        'site_id' => 'int',
        'thread_count' => 'int',
        'user_block_details' => 'string',
        '_links' => '\Swagger\Client\Discussion\Models\HalLinks',
        '_embedded' => '\Swagger\Client\Discussion\Models\HalThreadListEmbedded'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'is_requester_blocked' => 'isRequesterBlocked',
        'post_count' => 'postCount',
        'requester_id' => 'requesterId',
        'site_id' => 'siteId',
        'thread_count' => 'threadCount',
        'user_block_details' => 'userBlockDetails',
        '_links' => '_links',
        '_embedded' => '_embedded'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'is_requester_blocked' => 'setIsRequesterBlocked',
        'post_count' => 'setPostCount',
        'requester_id' => 'setRequesterId',
        'site_id' => 'setSiteId',
        'thread_count' => 'setThreadCount',
        'user_block_details' => 'setUserBlockDetails',
        '_links' => 'setLinks',
        '_embedded' => 'setEmbedded'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'is_requester_blocked' => 'getIsRequesterBlocked',
        'post_count' => 'getPostCount',
        'requester_id' => 'getRequesterId',
        'site_id' => 'getSiteId',
        'thread_count' => 'getThreadCount',
        'user_block_details' => 'getUserBlockDetails',
        '_links' => 'getLinks',
        '_embedded' => 'getEmbedded'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_requester_blocked'] = isset($data['is_requester_blocked']) ? $data['is_requester_blocked'] : false;
        $this->container['post_count'] = isset($data['post_count']) ? $data['post_count'] : null;
        $this->container['requester_id'] = isset($data['requester_id']) ? $data['requester_id'] : null;
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['thread_count'] = isset($data['thread_count']) ? $data['thread_count'] : null;
        $this->container['user_block_details'] = isset($data['user_block_details']) ? $data['user_block_details'] : null;
        $this->container['_links'] = isset($data['_links']) ? $data['_links'] : null;
        $this->container['_embedded'] = isset($data['_embedded']) ? $data['_embedded'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets is_requester_blocked
     * @return bool
     */
    public function getIsRequesterBlocked()
    {
        return $this->container['is_requester_blocked'];
    }

    /**
     * Sets is_requester_blocked
     * @param bool $is_requester_blocked
     * @return $this
     */
    public function setIsRequesterBlocked($is_requester_blocked)
    {
        $this->container['is_requester_blocked'] = $is_requester_blocked;

        return $this;
    }

    /**
     * Gets post_count
     * @return int
     */
    public function getPostCount()
    {
        return $this->container['post_count'];
    }

    /**
     * Sets post_count
     * @param int $post_count
     * @return $this
     */
    public function setPostCount($post_count)
    {
        $this->container['post_count'] = $post_count;

        return $this;
    }

    /**
     * Gets requester_id
     * @return string
     */
    public function getRequesterId()
    {
        return $this->container['requester_id'];
    }

    /**
     * Sets requester_id
     * @param string $requester_id
     * @return $this
     */
    public function setRequesterId($requester_id)
    {
        $this->container['requester_id'] = $requester_id;

        return $this;
    }

    /**
     * Gets site_id
     * @return int
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     * @param int $site_id
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets thread_count
     * @return int
     */
    public function getThreadCount()
    {
        return $this->container['thread_count'];
    }

    /**
     * Sets thread_count
     * @param int $thread_count
     * @return $this
     */
    public function setThreadCount($thread_count)
    {
        $this->container['thread_count'] = $thread_count;

        return $this;
    }

    /**
     * Gets user_block_details
     * @return string
     */
    public function getUserBlockDetails()
    {
        return $this->container['user_block_details'];
    }

    /**
     * Sets user_block_details
     * @param string $user_block_details
     * @return $this
     */
    public function setUserBlockDetails($user_block_details)
    {
        $this->container['user_block_details'] = $user_block_details;

        return $this;
    }

    /**
     * Gets _links
     * @return \Swagger\Client\Discussion\Models\HalLinks
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     * @param \Swagger\Client\Discussion\Models\HalLinks $_links
     * @return $this
     */
    public function setLinks($_links)
    {
        $this->container['_links'] = $_links;

        return $this;
    }

    /**
     * Gets _embedded
     * @return \Swagger\Client\Discussion\Models\HalThreadListEmbedded
     */
    public function getEmbedded()
    {
        return $this->container['_embedded'];
    }

    /**
     * Sets _embedded
     * @param \Swagger\Client\Discussion\Models\HalThreadListEmbedded $_embedded
     * @return $this
     */
    public function setEmbedded($_embedded)
    {
        $this->container['_embedded'] = $_embedded;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


