<?php
/**
 * PostRevision
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * discussion
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Discussion\Models;

use \ArrayAccess;

/**
 * PostRevision Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PostRevision implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PostRevision';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'post_id' => 'int',
        'creation_date' => '\Swagger\Client\Discussion\Models\Instant',
        'creator_id' => 'int',
        'title' => 'string',
        'raw_content' => 'string',
        'rendered_content' => 'string',
        'open_graph_id' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'post_id' => 'postId',
        'creation_date' => 'creationDate',
        'creator_id' => 'creatorId',
        'title' => 'title',
        'raw_content' => 'rawContent',
        'rendered_content' => 'renderedContent',
        'open_graph_id' => 'openGraphId'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'post_id' => 'setPostId',
        'creation_date' => 'setCreationDate',
        'creator_id' => 'setCreatorId',
        'title' => 'setTitle',
        'raw_content' => 'setRawContent',
        'rendered_content' => 'setRenderedContent',
        'open_graph_id' => 'setOpenGraphId'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'post_id' => 'getPostId',
        'creation_date' => 'getCreationDate',
        'creator_id' => 'getCreatorId',
        'title' => 'getTitle',
        'raw_content' => 'getRawContent',
        'rendered_content' => 'getRenderedContent',
        'open_graph_id' => 'getOpenGraphId'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['post_id'] = isset($data['post_id']) ? $data['post_id'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['creator_id'] = isset($data['creator_id']) ? $data['creator_id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['raw_content'] = isset($data['raw_content']) ? $data['raw_content'] : null;
        $this->container['rendered_content'] = isset($data['rendered_content']) ? $data['rendered_content'] : null;
        $this->container['open_graph_id'] = isset($data['open_graph_id']) ? $data['open_graph_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets post_id
     * @return int
     */
    public function getPostId()
    {
        return $this->container['post_id'];
    }

    /**
     * Sets post_id
     * @param int $post_id
     * @return $this
     */
    public function setPostId($post_id)
    {
        $this->container['post_id'] = $post_id;

        return $this;
    }

    /**
     * Gets creation_date
     * @return \Swagger\Client\Discussion\Models\Instant
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     * @param \Swagger\Client\Discussion\Models\Instant $creation_date
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets creator_id
     * @return int
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     * @param int $creator_id
     * @return $this
     */
    public function setCreatorId($creator_id)
    {
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets raw_content
     * @return string
     */
    public function getRawContent()
    {
        return $this->container['raw_content'];
    }

    /**
     * Sets raw_content
     * @param string $raw_content
     * @return $this
     */
    public function setRawContent($raw_content)
    {
        $this->container['raw_content'] = $raw_content;

        return $this;
    }

    /**
     * Gets rendered_content
     * @return string
     */
    public function getRenderedContent()
    {
        return $this->container['rendered_content'];
    }

    /**
     * Sets rendered_content
     * @param string $rendered_content
     * @return $this
     */
    public function setRenderedContent($rendered_content)
    {
        $this->container['rendered_content'] = $rendered_content;

        return $this;
    }

    /**
     * Gets open_graph_id
     * @return int
     */
    public function getOpenGraphId()
    {
        return $this->container['open_graph_id'];
    }

    /**
     * Sets open_graph_id
     * @param int $open_graph_id
     * @return $this
     */
    public function setOpenGraphId($open_graph_id)
    {
        $this->container['open_graph_id'] = $open_graph_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


