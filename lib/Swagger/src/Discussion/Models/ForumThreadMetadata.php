<?php
/**
 * ForumThreadMetadata
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * discussion
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Discussion\Models;

use \ArrayAccess;

/**
 * ForumThreadMetadata Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ForumThreadMetadata implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ForumThreadMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'creator_id' => 'int',
        'forum_id' => 'int',
        'creation_date' => '\Swagger\Client\Discussion\Models\Instant',
        'modification_date' => '\Swagger\Client\Discussion\Models\Instant',
        'post_count' => 'int',
        'view_count' => 'int',
        'first_post_id' => 'int',
        'last_post_id' => 'int',
        'is_viewable' => 'bool',
        'is_editable' => 'bool',
        'is_deleted' => 'bool',
        'is_held' => 'bool',
        'followed' => 'bool',
        'trending_score' => 'double'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'creator_id' => 'creatorId',
        'forum_id' => 'forumId',
        'creation_date' => 'creationDate',
        'modification_date' => 'modificationDate',
        'post_count' => 'postCount',
        'view_count' => 'viewCount',
        'first_post_id' => 'firstPostId',
        'last_post_id' => 'lastPostId',
        'is_viewable' => 'isViewable',
        'is_editable' => 'isEditable',
        'is_deleted' => 'isDeleted',
        'is_held' => 'isHeld',
        'followed' => 'followed',
        'trending_score' => 'trendingScore'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'creator_id' => 'setCreatorId',
        'forum_id' => 'setForumId',
        'creation_date' => 'setCreationDate',
        'modification_date' => 'setModificationDate',
        'post_count' => 'setPostCount',
        'view_count' => 'setViewCount',
        'first_post_id' => 'setFirstPostId',
        'last_post_id' => 'setLastPostId',
        'is_viewable' => 'setIsViewable',
        'is_editable' => 'setIsEditable',
        'is_deleted' => 'setIsDeleted',
        'is_held' => 'setIsHeld',
        'followed' => 'setFollowed',
        'trending_score' => 'setTrendingScore'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'creator_id' => 'getCreatorId',
        'forum_id' => 'getForumId',
        'creation_date' => 'getCreationDate',
        'modification_date' => 'getModificationDate',
        'post_count' => 'getPostCount',
        'view_count' => 'getViewCount',
        'first_post_id' => 'getFirstPostId',
        'last_post_id' => 'getLastPostId',
        'is_viewable' => 'getIsViewable',
        'is_editable' => 'getIsEditable',
        'is_deleted' => 'getIsDeleted',
        'is_held' => 'getIsHeld',
        'followed' => 'getFollowed',
        'trending_score' => 'getTrendingScore'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['creator_id'] = isset($data['creator_id']) ? $data['creator_id'] : null;
        $this->container['forum_id'] = isset($data['forum_id']) ? $data['forum_id'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['modification_date'] = isset($data['modification_date']) ? $data['modification_date'] : null;
        $this->container['post_count'] = isset($data['post_count']) ? $data['post_count'] : null;
        $this->container['view_count'] = isset($data['view_count']) ? $data['view_count'] : null;
        $this->container['first_post_id'] = isset($data['first_post_id']) ? $data['first_post_id'] : null;
        $this->container['last_post_id'] = isset($data['last_post_id']) ? $data['last_post_id'] : null;
        $this->container['is_viewable'] = isset($data['is_viewable']) ? $data['is_viewable'] : false;
        $this->container['is_editable'] = isset($data['is_editable']) ? $data['is_editable'] : false;
        $this->container['is_deleted'] = isset($data['is_deleted']) ? $data['is_deleted'] : false;
        $this->container['is_held'] = isset($data['is_held']) ? $data['is_held'] : false;
        $this->container['followed'] = isset($data['followed']) ? $data['followed'] : false;
        $this->container['trending_score'] = isset($data['trending_score']) ? $data['trending_score'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets creator_id
     * @return int
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     * @param int $creator_id
     * @return $this
     */
    public function setCreatorId($creator_id)
    {
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets forum_id
     * @return int
     */
    public function getForumId()
    {
        return $this->container['forum_id'];
    }

    /**
     * Sets forum_id
     * @param int $forum_id
     * @return $this
     */
    public function setForumId($forum_id)
    {
        $this->container['forum_id'] = $forum_id;

        return $this;
    }

    /**
     * Gets creation_date
     * @return \Swagger\Client\Discussion\Models\Instant
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     * @param \Swagger\Client\Discussion\Models\Instant $creation_date
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets modification_date
     * @return \Swagger\Client\Discussion\Models\Instant
     */
    public function getModificationDate()
    {
        return $this->container['modification_date'];
    }

    /**
     * Sets modification_date
     * @param \Swagger\Client\Discussion\Models\Instant $modification_date
     * @return $this
     */
    public function setModificationDate($modification_date)
    {
        $this->container['modification_date'] = $modification_date;

        return $this;
    }

    /**
     * Gets post_count
     * @return int
     */
    public function getPostCount()
    {
        return $this->container['post_count'];
    }

    /**
     * Sets post_count
     * @param int $post_count
     * @return $this
     */
    public function setPostCount($post_count)
    {
        $this->container['post_count'] = $post_count;

        return $this;
    }

    /**
     * Gets view_count
     * @return int
     */
    public function getViewCount()
    {
        return $this->container['view_count'];
    }

    /**
     * Sets view_count
     * @param int $view_count
     * @return $this
     */
    public function setViewCount($view_count)
    {
        $this->container['view_count'] = $view_count;

        return $this;
    }

    /**
     * Gets first_post_id
     * @return int
     */
    public function getFirstPostId()
    {
        return $this->container['first_post_id'];
    }

    /**
     * Sets first_post_id
     * @param int $first_post_id
     * @return $this
     */
    public function setFirstPostId($first_post_id)
    {
        $this->container['first_post_id'] = $first_post_id;

        return $this;
    }

    /**
     * Gets last_post_id
     * @return int
     */
    public function getLastPostId()
    {
        return $this->container['last_post_id'];
    }

    /**
     * Sets last_post_id
     * @param int $last_post_id
     * @return $this
     */
    public function setLastPostId($last_post_id)
    {
        $this->container['last_post_id'] = $last_post_id;

        return $this;
    }

    /**
     * Gets is_viewable
     * @return bool
     */
    public function getIsViewable()
    {
        return $this->container['is_viewable'];
    }

    /**
     * Sets is_viewable
     * @param bool $is_viewable
     * @return $this
     */
    public function setIsViewable($is_viewable)
    {
        $this->container['is_viewable'] = $is_viewable;

        return $this;
    }

    /**
     * Gets is_editable
     * @return bool
     */
    public function getIsEditable()
    {
        return $this->container['is_editable'];
    }

    /**
     * Sets is_editable
     * @param bool $is_editable
     * @return $this
     */
    public function setIsEditable($is_editable)
    {
        $this->container['is_editable'] = $is_editable;

        return $this;
    }

    /**
     * Gets is_deleted
     * @return bool
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     * @param bool $is_deleted
     * @return $this
     */
    public function setIsDeleted($is_deleted)
    {
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets is_held
     * @return bool
     */
    public function getIsHeld()
    {
        return $this->container['is_held'];
    }

    /**
     * Sets is_held
     * @param bool $is_held
     * @return $this
     */
    public function setIsHeld($is_held)
    {
        $this->container['is_held'] = $is_held;

        return $this;
    }

    /**
     * Gets followed
     * @return bool
     */
    public function getFollowed()
    {
        return $this->container['followed'];
    }

    /**
     * Sets followed
     * @param bool $followed
     * @return $this
     */
    public function setFollowed($followed)
    {
        $this->container['followed'] = $followed;

        return $this;
    }

    /**
     * Gets trending_score
     * @return double
     */
    public function getTrendingScore()
    {
        return $this->container['trending_score'];
    }

    /**
     * Sets trending_score
     * @param double $trending_score
     * @return $this
     */
    public function setTrendingScore($trending_score)
    {
        $this->container['trending_score'] = $trending_score;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


