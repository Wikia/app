<?php
/**
 * Content
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\ContentEntity\Models;

use \ArrayAccess;

/**
 * Content Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Content implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Content';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'string',
        'url' => 'string',
        'title' => 'string',
        'image' => 'string',
        'site_name' => 'string',
        'content_type' => 'string',
        'modified' => 'string',
        'authors' => '\Swagger\Client\ContentEntity\Models\Author[]',
        'related_entities' => '\Swagger\Client\ContentEntity\Models\Entity[]',
        'content_metadata' => 'map[string,string]',
        'related_articles' => '\Swagger\Client\ContentEntity\Models\RelatedArticle[]',
        '_links' => 'map[string,map[string,string]]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'url' => 'url',
        'title' => 'title',
        'image' => 'image',
        'site_name' => 'siteName',
        'content_type' => 'contentType',
        'modified' => 'modified',
        'authors' => 'authors',
        'related_entities' => 'relatedEntities',
        'content_metadata' => 'contentMetadata',
        'related_articles' => 'relatedArticles',
        '_links' => '_links'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'url' => 'setUrl',
        'title' => 'setTitle',
        'image' => 'setImage',
        'site_name' => 'setSiteName',
        'content_type' => 'setContentType',
        'modified' => 'setModified',
        'authors' => 'setAuthors',
        'related_entities' => 'setRelatedEntities',
        'content_metadata' => 'setContentMetadata',
        'related_articles' => 'setRelatedArticles',
        '_links' => 'setLinks'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'url' => 'getUrl',
        'title' => 'getTitle',
        'image' => 'getImage',
        'site_name' => 'getSiteName',
        'content_type' => 'getContentType',
        'modified' => 'getModified',
        'authors' => 'getAuthors',
        'related_entities' => 'getRelatedEntities',
        'content_metadata' => 'getContentMetadata',
        'related_articles' => 'getRelatedArticles',
        '_links' => 'getLinks'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['site_name'] = isset($data['site_name']) ? $data['site_name'] : null;
        $this->container['content_type'] = isset($data['content_type']) ? $data['content_type'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['authors'] = isset($data['authors']) ? $data['authors'] : null;
        $this->container['related_entities'] = isset($data['related_entities']) ? $data['related_entities'] : null;
        $this->container['content_metadata'] = isset($data['content_metadata']) ? $data['content_metadata'] : null;
        $this->container['related_articles'] = isset($data['related_articles']) ? $data['related_articles'] : null;
        $this->container['_links'] = isset($data['_links']) ? $data['_links'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets image
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     * @param string $image
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets site_name
     * @return string
     */
    public function getSiteName()
    {
        return $this->container['site_name'];
    }

    /**
     * Sets site_name
     * @param string $site_name
     * @return $this
     */
    public function setSiteName($site_name)
    {
        $this->container['site_name'] = $site_name;

        return $this;
    }

    /**
     * Gets content_type
     * @return string
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     * @param string $content_type
     * @return $this
     */
    public function setContentType($content_type)
    {
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets modified
     * @return string
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param string $modified
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets authors
     * @return \Swagger\Client\ContentEntity\Models\Author[]
     */
    public function getAuthors()
    {
        return $this->container['authors'];
    }

    /**
     * Sets authors
     * @param \Swagger\Client\ContentEntity\Models\Author[] $authors
     * @return $this
     */
    public function setAuthors($authors)
    {
        $this->container['authors'] = $authors;

        return $this;
    }

    /**
     * Gets related_entities
     * @return \Swagger\Client\ContentEntity\Models\Entity[]
     */
    public function getRelatedEntities()
    {
        return $this->container['related_entities'];
    }

    /**
     * Sets related_entities
     * @param \Swagger\Client\ContentEntity\Models\Entity[] $related_entities
     * @return $this
     */
    public function setRelatedEntities($related_entities)
    {
        $this->container['related_entities'] = $related_entities;

        return $this;
    }

    /**
     * Gets content_metadata
     * @return map[string,string]
     */
    public function getContentMetadata()
    {
        return $this->container['content_metadata'];
    }

    /**
     * Sets content_metadata
     * @param map[string,string] $content_metadata
     * @return $this
     */
    public function setContentMetadata($content_metadata)
    {
        $this->container['content_metadata'] = $content_metadata;

        return $this;
    }

    /**
     * Gets related_articles
     * @return \Swagger\Client\ContentEntity\Models\RelatedArticle[]
     */
    public function getRelatedArticles()
    {
        return $this->container['related_articles'];
    }

    /**
     * Sets related_articles
     * @param \Swagger\Client\ContentEntity\Models\RelatedArticle[] $related_articles
     * @return $this
     */
    public function setRelatedArticles($related_articles)
    {
        $this->container['related_articles'] = $related_articles;

        return $this;
    }

    /**
     * Gets _links
     * @return map[string,map[string,string]]
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     * @param map[string,map[string,string]] $_links
     * @return $this
     */
    public function setLinks($_links)
    {
        $this->container['_links'] = $_links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


