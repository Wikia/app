<?php
/**
 * MetadataApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\ContentEntity\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * MetadataApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MetadataApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return MetadataApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * create
     *
     * creates new metadata for an entity
     *
     * @param string $entity_id  (required)
     * @param string $meta_data_name  (required)
     * @param string $body  (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function create($entity_id, $meta_data_name, $body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createWithHttpInfo ($entity_id, $meta_data_name, $body);
        return $response; 
    }


    /**
     * createWithHttpInfo
     *
     * creates new metadata for an entity
     *
     * @param string $entity_id  (required)
     * @param string $meta_data_name  (required)
     * @param string $body  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createWithHttpInfo($entity_id, $meta_data_name, $body = null)
    {
        
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling create');
        }
        // verify the required parameter 'meta_data_name' is set
        if ($meta_data_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meta_data_name when calling create');
        }
  
        // parse inputs
        $resourcePath = "/entity/{entityId}/metadata/{metaDataName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                "{" . "entityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entity_id),
                $resourcePath
            );
        }// path params
        
        if ($meta_data_name !== null) {
            $resourcePath = str_replace(
                "{" . "metaDataName" . "}",
                $this->apiClient->getSerializer()->toPathValue($meta_data_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 409:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * delete
     *
     * delete an entity metadata entry
     *
     * @param string $entity_id  (required)
     * @param string $meta_data_name  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function delete($entity_id, $meta_data_name)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteWithHttpInfo ($entity_id, $meta_data_name);
        return $response; 
    }


    /**
     * deleteWithHttpInfo
     *
     * delete an entity metadata entry
     *
     * @param string $entity_id  (required)
     * @param string $meta_data_name  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteWithHttpInfo($entity_id, $meta_data_name)
    {
        
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling delete');
        }
        // verify the required parameter 'meta_data_name' is set
        if ($meta_data_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meta_data_name when calling delete');
        }
  
        // parse inputs
        $resourcePath = "/entity/{entityId}/metadata/{metaDataName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                "{" . "entityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entity_id),
                $resourcePath
            );
        }// path params
        
        if ($meta_data_name !== null) {
            $resourcePath = str_replace(
                "{" . "metaDataName" . "}",
                $this->apiClient->getSerializer()->toPathValue($meta_data_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteAll
     *
     * delete all of an entity's metadata
     *
     * @param string $entity_id  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteAll($entity_id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteAllWithHttpInfo ($entity_id);
        return $response; 
    }


    /**
     * deleteAllWithHttpInfo
     *
     * delete all of an entity's metadata
     *
     * @param string $entity_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteAllWithHttpInfo($entity_id)
    {
        
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling deleteAll');
        }
  
        // parse inputs
        $resourcePath = "/entity/{entityId}/metadata";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                "{" . "entityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entity_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * get
     *
     * get a specific metadata entry for an entity
     *
     * @param string $entity_id  (required)
     * @param string $meta_data_name  (required)
     * @return \Swagger\Client\ContentEntity\Models\MetaData
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function get($entity_id, $meta_data_name)
    {
        list($response, $statusCode, $httpHeader) = $this->getWithHttpInfo ($entity_id, $meta_data_name);
        return $response; 
    }


    /**
     * getWithHttpInfo
     *
     * get a specific metadata entry for an entity
     *
     * @param string $entity_id  (required)
     * @param string $meta_data_name  (required)
     * @return Array of \Swagger\Client\ContentEntity\Models\MetaData, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getWithHttpInfo($entity_id, $meta_data_name)
    {
        
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling get');
        }
        // verify the required parameter 'meta_data_name' is set
        if ($meta_data_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meta_data_name when calling get');
        }
  
        // parse inputs
        $resourcePath = "/entity/{entityId}/metadata/{metaDataName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                "{" . "entityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entity_id),
                $resourcePath
            );
        }// path params
        
        if ($meta_data_name !== null) {
            $resourcePath = str_replace(
                "{" . "metaDataName" . "}",
                $this->apiClient->getSerializer()->toPathValue($meta_data_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\ContentEntity\Models\MetaData'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\ContentEntity\Models\MetaData', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\MetaData', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAll
     *
     * get all metadata for an entity
     *
     * @param string $entity_id  (required)
     * @return \Swagger\Client\ContentEntity\Models\MetaData[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAll($entity_id)
    {
        list($response, $statusCode, $httpHeader) = $this->getAllWithHttpInfo ($entity_id);
        return $response; 
    }


    /**
     * getAllWithHttpInfo
     *
     * get all metadata for an entity
     *
     * @param string $entity_id  (required)
     * @return Array of \Swagger\Client\ContentEntity\Models\MetaData[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAllWithHttpInfo($entity_id)
    {
        
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling getAll');
        }
  
        // parse inputs
        $resourcePath = "/entity/{entityId}/metadata";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                "{" . "entityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entity_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\ContentEntity\Models\MetaData[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\ContentEntity\Models\MetaData[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\MetaData[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * update
     *
     * update a specific metadata entry for an entity
     *
     * @param string $entity_id  (required)
     * @param string $meta_data_name  (required)
     * @param string $body  (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function update($entity_id, $meta_data_name, $body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->updateWithHttpInfo ($entity_id, $meta_data_name, $body);
        return $response; 
    }


    /**
     * updateWithHttpInfo
     *
     * update a specific metadata entry for an entity
     *
     * @param string $entity_id  (required)
     * @param string $meta_data_name  (required)
     * @param string $body  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateWithHttpInfo($entity_id, $meta_data_name, $body = null)
    {
        
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling update');
        }
        // verify the required parameter 'meta_data_name' is set
        if ($meta_data_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $meta_data_name when calling update');
        }
  
        // parse inputs
        $resourcePath = "/entity/{entityId}/metadata/{metaDataName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                "{" . "entityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entity_id),
                $resourcePath
            );
        }// path params
        
        if ($meta_data_name !== null) {
            $resourcePath = str_replace(
                "{" . "metaDataName" . "}",
                $this->apiClient->getSerializer()->toPathValue($meta_data_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams
            );
            
            return array(null, $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            case 404:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
