<?php
/**
 * EntityToEntityRelationshipsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\ContentEntity\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * EntityToEntityRelationshipsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EntityToEntityRelationshipsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/content-entity-service');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return EntityToEntityRelationshipsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation create
     *
     * create a relation between two entities. A will be related to B, but B will not be related to A
     *
     * @param string $entity_id  (required)
     * @param string $other_entity_id  (required)
     * @param double $relevance  (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function create($entity_id, $other_entity_id, $relevance = null)
    {
        list($response) = $this->createWithHttpInfo($entity_id, $other_entity_id, $relevance);
        return $response;
    }

    /**
     * Operation createWithHttpInfo
     *
     * create a relation between two entities. A will be related to B, but B will not be related to A
     *
     * @param string $entity_id  (required)
     * @param string $other_entity_id  (required)
     * @param double $relevance  (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createWithHttpInfo($entity_id, $other_entity_id, $relevance = null)
    {
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling create');
        }
        // verify the required parameter 'other_entity_id' is set
        if ($other_entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $other_entity_id when calling create');
        }
        // parse inputs
        $resourcePath = "/entity/{entityId}/relationships/{otherEntityId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($relevance !== null) {
            $queryParams['relevance'] = $this->apiClient->getSerializer()->toQueryValue($relevance);
        }
        // path params
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                "{" . "entityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entity_id),
                $resourcePath
            );
        }
        // path params
        if ($other_entity_id !== null) {
            $resourcePath = str_replace(
                "{" . "otherEntityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($other_entity_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('AUTH-SECRET');
        if (strlen($apiKey) !== 0) {
            $headerParams['AUTH-SECRET'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/entity/{entityId}/relationships/{otherEntityId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRelationships
     *
     * get an entity's relationships
     *
     * @param string $entity_id  (required)
     * @return \Swagger\Client\ContentEntity\Models\EntityRelationshipGraph
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getRelationships($entity_id)
    {
        list($response) = $this->getRelationshipsWithHttpInfo($entity_id);
        return $response;
    }

    /**
     * Operation getRelationshipsWithHttpInfo
     *
     * get an entity's relationships
     *
     * @param string $entity_id  (required)
     * @return Array of \Swagger\Client\ContentEntity\Models\EntityRelationshipGraph, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getRelationshipsWithHttpInfo($entity_id)
    {
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling getRelationships');
        }
        // parse inputs
        $resourcePath = "/entity/{entityId}/relationships";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                "{" . "entityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entity_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\ContentEntity\Models\EntityRelationshipGraph',
                '/entity/{entityId}/relationships'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\ContentEntity\Models\EntityRelationshipGraph', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\EntityRelationshipGraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation unrelate
     *
     * delete the relationship from a -> b. Does not affect b -> a
     *
     * @param string $entity_id  (required)
     * @param string $other_entity_id  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function unrelate($entity_id, $other_entity_id)
    {
        list($response) = $this->unrelateWithHttpInfo($entity_id, $other_entity_id);
        return $response;
    }

    /**
     * Operation unrelateWithHttpInfo
     *
     * delete the relationship from a -> b. Does not affect b -> a
     *
     * @param string $entity_id  (required)
     * @param string $other_entity_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function unrelateWithHttpInfo($entity_id, $other_entity_id)
    {
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling unrelate');
        }
        // verify the required parameter 'other_entity_id' is set
        if ($other_entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $other_entity_id when calling unrelate');
        }
        // parse inputs
        $resourcePath = "/entity/{entityId}/relationships/{otherEntityId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                "{" . "entityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entity_id),
                $resourcePath
            );
        }
        // path params
        if ($other_entity_id !== null) {
            $resourcePath = str_replace(
                "{" . "otherEntityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($other_entity_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('AUTH-SECRET');
        if (strlen($apiKey) !== 0) {
            $headerParams['AUTH-SECRET'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/entity/{entityId}/relationships/{otherEntityId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation unrelateAll
     *
     * delete all the relationships from a
     *
     * @param string $entity_id  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function unrelateAll($entity_id)
    {
        list($response) = $this->unrelateAllWithHttpInfo($entity_id);
        return $response;
    }

    /**
     * Operation unrelateAllWithHttpInfo
     *
     * delete all the relationships from a
     *
     * @param string $entity_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function unrelateAllWithHttpInfo($entity_id)
    {
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling unrelateAll');
        }
        // parse inputs
        $resourcePath = "/entity/{entityId}/relationships";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // path params
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                "{" . "entityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entity_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('AUTH-SECRET');
        if (strlen($apiKey) !== 0) {
            $headerParams['AUTH-SECRET'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/entity/{entityId}/relationships'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\ContentEntity\Models\ResponseObj', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
