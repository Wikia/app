<?php
/**
 * TCSApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * template-classification-storage
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.11.34
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\TemplateClassification\Storage\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * TCSApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TCSApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/template-classification-storage');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return TCSApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteTemplateInformation
     *
     * Deletes template information for a given template on a wiki
     *
     * @param int $wiki_id  (required)
     * @param int $page_id  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteTemplateInformation($wiki_id, $page_id)
    {
        list($response) = $this->deleteTemplateInformationWithHttpInfo($wiki_id, $page_id);
        return $response;
    }

    /**
     * Operation deleteTemplateInformationWithHttpInfo
     *
     * Deletes template information for a given template on a wiki
     *
     * @param int $wiki_id  (required)
     * @param int $page_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteTemplateInformationWithHttpInfo($wiki_id, $page_id)
    {
        // verify the required parameter 'wiki_id' is set
        if ($wiki_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wiki_id when calling deleteTemplateInformation');
        }
        // verify the required parameter 'page_id' is set
        if ($page_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_id when calling deleteTemplateInformation');
        }
        // parse inputs
        $resourcePath = "/{wiki_id}/{page_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($wiki_id !== null) {
            $resourcePath = str_replace(
                "{" . "wiki_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($wiki_id),
                $resourcePath
            );
        }
        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                "{" . "page_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/{wiki_id}/{page_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTemplateInformationForWiki
     *
     * Deletes template information for all templates on a wiki
     *
     * @param int $wiki_id  (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteTemplateInformationForWiki($wiki_id)
    {
        list($response) = $this->deleteTemplateInformationForWikiWithHttpInfo($wiki_id);
        return $response;
    }

    /**
     * Operation deleteTemplateInformationForWikiWithHttpInfo
     *
     * Deletes template information for all templates on a wiki
     *
     * @param int $wiki_id  (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteTemplateInformationForWikiWithHttpInfo($wiki_id)
    {
        // verify the required parameter 'wiki_id' is set
        if ($wiki_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wiki_id when calling deleteTemplateInformationForWiki');
        }
        // parse inputs
        $resourcePath = "/{wiki_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($wiki_id !== null) {
            $resourcePath = str_replace(
                "{" . "wiki_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($wiki_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/{wiki_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getTemplateDetails
     *
     * Provides all template types with providers information
     *
     * @param int $wiki_id Wikia ID (required)
     * @param int $page_id Article ID (required)
     * @return \Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeProvider[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTemplateDetails($wiki_id, $page_id)
    {
        list($response) = $this->getTemplateDetailsWithHttpInfo($wiki_id, $page_id);
        return $response;
    }

    /**
     * Operation getTemplateDetailsWithHttpInfo
     *
     * Provides all template types with providers information
     *
     * @param int $wiki_id Wikia ID (required)
     * @param int $page_id Article ID (required)
     * @return Array of \Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeProvider[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTemplateDetailsWithHttpInfo($wiki_id, $page_id)
    {
        // verify the required parameter 'wiki_id' is set
        if ($wiki_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wiki_id when calling getTemplateDetails');
        }
        // verify the required parameter 'page_id' is set
        if ($page_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_id when calling getTemplateDetails');
        }
        // parse inputs
        $resourcePath = "/{wiki_id}/{page_id}/providers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($wiki_id !== null) {
            $resourcePath = str_replace(
                "{" . "wiki_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($wiki_id),
                $resourcePath
            );
        }
        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                "{" . "page_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeProvider[]',
                '/{wiki_id}/{page_id}/providers'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeProvider[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeProvider[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTemplateType
     *
     * Provides template type
     *
     * @param int $wiki_id Wikia ID (required)
     * @param int $page_id Article ID (required)
     * @return \Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeHolder
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTemplateType($wiki_id, $page_id)
    {
        list($response) = $this->getTemplateTypeWithHttpInfo($wiki_id, $page_id);
        return $response;
    }

    /**
     * Operation getTemplateTypeWithHttpInfo
     *
     * Provides template type
     *
     * @param int $wiki_id Wikia ID (required)
     * @param int $page_id Article ID (required)
     * @return Array of \Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeHolder, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTemplateTypeWithHttpInfo($wiki_id, $page_id)
    {
        // verify the required parameter 'wiki_id' is set
        if ($wiki_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wiki_id when calling getTemplateType');
        }
        // verify the required parameter 'page_id' is set
        if ($page_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_id when calling getTemplateType');
        }
        // parse inputs
        $resourcePath = "/{wiki_id}/{page_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($wiki_id !== null) {
            $resourcePath = str_replace(
                "{" . "wiki_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($wiki_id),
                $resourcePath
            );
        }
        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                "{" . "page_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeHolder',
                '/{wiki_id}/{page_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeHolder', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeHolder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTemplateTypesOnWiki
     *
     * Provides template types on wiki
     *
     * @param int $wiki_id Wikia ID (required)
     * @return \Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeHolder[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTemplateTypesOnWiki($wiki_id)
    {
        list($response) = $this->getTemplateTypesOnWikiWithHttpInfo($wiki_id);
        return $response;
    }

    /**
     * Operation getTemplateTypesOnWikiWithHttpInfo
     *
     * Provides template types on wiki
     *
     * @param int $wiki_id Wikia ID (required)
     * @return Array of \Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeHolder[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTemplateTypesOnWikiWithHttpInfo($wiki_id)
    {
        // verify the required parameter 'wiki_id' is set
        if ($wiki_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wiki_id when calling getTemplateTypesOnWiki');
        }
        // parse inputs
        $resourcePath = "/{wiki_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($wiki_id !== null) {
            $resourcePath = str_replace(
                "{" . "wiki_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($wiki_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeHolder[]',
                '/{wiki_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeHolder[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeHolder[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation insertTemplateDetails
     *
     * Save template type data
     *
     * @param int $wiki_id Wikia ID (required)
     * @param int $page_id Article ID (required)
     * @param \Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeProvider $body Provider data (optional)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function insertTemplateDetails($wiki_id, $page_id, $body = null)
    {
        list($response) = $this->insertTemplateDetailsWithHttpInfo($wiki_id, $page_id, $body);
        return $response;
    }

    /**
     * Operation insertTemplateDetailsWithHttpInfo
     *
     * Save template type data
     *
     * @param int $wiki_id Wikia ID (required)
     * @param int $page_id Article ID (required)
     * @param \Swagger\Client\TemplateClassification\Storage\Models\TemplateTypeProvider $body Provider data (optional)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function insertTemplateDetailsWithHttpInfo($wiki_id, $page_id, $body = null)
    {
        // verify the required parameter 'wiki_id' is set
        if ($wiki_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $wiki_id when calling insertTemplateDetails');
        }
        // verify the required parameter 'page_id' is set
        if ($page_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_id when calling insertTemplateDetails');
        }
        // parse inputs
        $resourcePath = "/{wiki_id}/{page_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($wiki_id !== null) {
            $resourcePath = str_replace(
                "{" . "wiki_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($wiki_id),
                $resourcePath
            );
        }
        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                "{" . "page_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/{wiki_id}/{page_id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

}
