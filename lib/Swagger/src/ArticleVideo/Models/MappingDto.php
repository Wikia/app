<?php
/**
 * MappingDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * article-video
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: article-video-20200107-153541-687dd52-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\ArticleVideo\Models;

use \ArrayAccess;

/**
 * MappingDto Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MappingDto implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MappingDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'url' => 'string',
        'media_id' => 'string',
        'impressions_per_session' => 'int',
        'product_default' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'url' => 'url',
        'media_id' => 'media_id',
        'impressions_per_session' => 'impressionsPerSession',
        'product_default' => 'productDefault'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'url' => 'setUrl',
        'media_id' => 'setMediaId',
        'impressions_per_session' => 'setImpressionsPerSession',
        'product_default' => 'setProductDefault'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'url' => 'getUrl',
        'media_id' => 'getMediaId',
        'impressions_per_session' => 'getImpressionsPerSession',
        'product_default' => 'getProductDefault'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['media_id'] = isset($data['media_id']) ? $data['media_id'] : null;
        $this->container['impressions_per_session'] = isset($data['impressions_per_session']) ? $data['impressions_per_session'] : null;
        $this->container['product_default'] = isset($data['product_default']) ? $data['product_default'] : false;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if (!is_null($this->container['media_id']) && (strlen($this->container['media_id']) > 8)) {
            $invalid_properties[] = "invalid value for 'media_id', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['media_id']) && (strlen($this->container['media_id']) < 8)) {
            $invalid_properties[] = "invalid value for 'media_id', the character length must be bigger than or equal to 8.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['media_id']) > 8) {
            return false;
        }
        if (strlen($this->container['media_id']) < 8) {
            return false;
        }
        return true;
    }


    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets media_id
     * @return string
     */
    public function getMediaId()
    {
        return $this->container['media_id'];
    }

    /**
     * Sets media_id
     * @param string $media_id
     * @return $this
     */
    public function setMediaId($media_id)
    {
        if (strlen($media_id) > 8) {
            throw new \InvalidArgumentException('invalid length for $media_id when calling MappingDto., must be smaller than or equal to 8.');
        }
        if (strlen($media_id) < 8) {
            throw new \InvalidArgumentException('invalid length for $media_id when calling MappingDto., must be bigger than or equal to 8.');
        }
        $this->container['media_id'] = $media_id;

        return $this;
    }

    /**
     * Gets impressions_per_session
     * @return int
     */
    public function getImpressionsPerSession()
    {
        return $this->container['impressions_per_session'];
    }

    /**
     * Sets impressions_per_session
     * @param int $impressions_per_session
     * @return $this
     */
    public function setImpressionsPerSession($impressions_per_session)
    {
        $this->container['impressions_per_session'] = $impressions_per_session;

        return $this;
    }

    /**
     * Gets product_default
     * @return bool
     */
    public function getProductDefault()
    {
        return $this->container['product_default'];
    }

    /**
     * Sets product_default
     * @param bool $product_default
     * @return $this
     */
    public function setProductDefault($product_default)
    {
        $this->container['product_default'] = $product_default;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


