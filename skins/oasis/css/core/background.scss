@import "skins/shared/color";
@import "layout";
@import "responsive-variables";
@import "skins/shared/mixins/calc";

// Background
// TODO: we might want to consider pre-calculating all of the background
// positioning stuff in PHP and then passing it in here, it would be much
// more performant. However, before we do that, we should come up with a
// better way of passing parameters into Sass (like using a hash), otherwise
// the URLs generated for Sass files will be even more ridiculously long.
$background-height: get_command_line_param( "background-image-height", 0 );
$background-width: get_command_line_param( "background-image-width", 0 );

// convert unitless int values to pixels
@if unitless($background-height) {
  $background-height : $background-height * 1px;
}
@if unitless($background-width) {
  $background-width : $background-width * 1px;
}

$background-width-half: $background-width / 2;
$background-offset: ( $breakpoint-fluid - $background-width ) / 2;
$background-align: if( $background-width > $width-outside, center, left );



// The background image is considered to be "wide" if it bleeds off the screen
// at the size of the fluid breakpoint. This is important because it will determine
// how the two slices of background images need to be positioned below.
$background-is-wide: if( $background-width > $breakpoint-fluid, true, false );

// This mixin positions the background images and gradients while the skin is
// in fluid width mode. Positioning is based on the left and right edges of
// the viewport.
@mixin background-fluid() {
// This calculates the width from the edge of each background image slice
// to the point where it is visible inside the viewpoint at the time the
// fluid breakpoint is reached. This will be used as an offset to keep
// the image positioned in the same place when the browser is being resized.
	$background-offset: ( $breakpoint-fluid - $background-width ) / 2;
	$background-offset-left: 0;
	$background-offset-right: 0;
	$background-position-after: -$background-width-half;
	$background-position-before: 0;
	$background-width-both: $background-width-half;

// The gradient is positioned on the outer edge of the background image
// slices, overlapping by the width of the gradient itself.
	$gradient-offset: ( $background-width-half + $background-offset ) - $width-gradient;

	@if ( $background-is-wide ) {
		$background-width-both: $background-width-half + $background-offset;
		$background-position-before: $background-offset;

	} @else {
		$background-offset-left: $background-offset;
		$background-offset-right: $background-offset;
	}

	// Middle space
	$width-middle-subtrahend: $background-width + 2 * $background-offset;
	$margin-middle-base: $width-middle-subtrahend / 2;

	body.background-dynamic.skin-oasis {
		&:after,
		&:before {
			width: $background-width-both;
		}

		&:after {
			background-position: $background-position-after 0;
			/* @noflip */
			margin-right: 0;
			/* @noflip */
			right: $background-offset-right;
		}

		&:before {
			background-position: $background-position-before 0;
			/* @noflip */
			margin-left: 0;
			/* @noflip */
			left: $background-offset-left;
		}

		.background-image-gradient {
			@include calc(margin-left, #{$margin-middle-base} - 50%);
			@include calc(width, 100% - #{$width-middle-subtrahend});

			&:after,
			&:before {
				width: $width-gradient;
			}

			&:after {
				// TODO: replace this with a proper linear-gradient mixin
				background-color: rgba( $color-body-middle, 0 );
				background-image: -webkit-linear-gradient(right, rgba( $color-body-middle, 0 ) 0%, $color-body-middle 100%);
				background-image: linear-gradient(to left, rgba( $color-body-middle, 0 ) 0%, $color-body-middle 100%);
				right: $gradient-offset;
			}

			&:before {
				// TODO: replace this with a proper linear-gradient mixin
				background-color: rgba( $color-body-middle, 0 );
				background-image: -webkit-linear-gradient(left, rgba( $color-body-middle, 0 ) 0%, $color-body-middle 100%);
				background-image: linear-gradient(to right, rgba( $color-body-middle, 0 ) 0%, $color-body-middle 100%);
				left: $gradient-offset;
			}
		}
	}
}

// This mixin positions the background images and gradients once the max width
// has been hit and the skin goes back into static mode. Positioning is done
// relative to the center of the viewport.
@mixin background-max() {
// This margin correctly aligns the background image slices from the center
// of the viewport. It's basically the difference between where the image sat
// before the layout became fluid, and where it sits once max width is reached.
	$background-margin: $width-outside-half - ( $width-outside-max-half + $background-width-half );
	$background-position-after: -$background-width-half;

// The gradient is still positioned on the outer edge of the background image
// slices, overlapping by the width of the gradient itself.
	$gradient-offset: $background-margin + ( $background-width-half - $width-gradient );

	// Middle space
	$width-middle: $breakpoint-max - ($background-width + 2 * $background-offset);
	$margin-middle: $width-middle / -2;

	body.background-dynamic.skin-oasis {
		&:after,
		&:before {
			width: $background-width-half;
		}

		&:after {
			background-position: $background-position-after 0;
			/* @noflip */
			right: 50%;
			/* @noflip */
			margin-right: $background-margin;
		}

		&:before {
			background-position: 0;
			/* @noflip */
			left: 50%;
			/* @noflip */
			margin-left: $background-margin;
		}

		.background-image-gradient {
			margin-left: $margin-middle;
			width: $width-middle;

			&:after {
				margin-right: $gradient-offset;
				right: 50%;
			}

			&:before {
				left: 50%;
				margin-left: $gradient-offset;
			}
		}
	}
}

// standard logic
@if ( $oasisWidthType != 0) {
	body {
		background: $color-body url($background-image) top $background-align repeat; /* $wgCdnStylePath */
	}

	body.background-not-tiled {
		background-repeat: no-repeat;
	}

	body.background-fixed {
		background-attachment: fixed;
	}
}

// responive layout logic
@if ( $responsive-layout-enabled ) {
	body.background-dynamic.skin-oasis {
		background-color: $color-body;
		overflow: hidden;
		position: relative;

		&:after,
		&:before {
			background-image: url( $background-image ); /* $wgCdnStylePath */
			background-repeat: no-repeat;
			content: "";
			height: $background-height;
			position: absolute;
			top: 0;
			width: $background-width-half;
			z-index: -1;
		}
		&.background-fixed:after,
		&.background-fixed:before
		{
			position: fixed;
		}

		&:after {
			background-position: -$background-width-half 0;
			/* @noflip */
			right: 50%;
			/* @noflip */
			margin-right: -$background-width-half;
		}

		&:before {
			// The extra 0.1% fixes sub-pixel rendering issues in Safari (DAR-1052)
			/* @noflip */
			left: 50.1%;
			/* @noflip */
			margin-left: -$background-width-half;
		}

		.background-image-gradient {
			background: $color-body-middle;
			left: 50%;

			&,
			&:before,
			&:after {
				content: "";
				height: 100%;
				position: fixed;
				top: 0;
			}
		}
	}

	@media screen and (max-width: $breakpoint-content) {
		body.skin-oasis {
			background-image: none;

			&:after,
			&:before {
				display: none;
			}
		}
	}

	@media screen and (min-width: $breakpoint-fluid) {
		@include background-fluid;
	}

	@media screen and (min-width: $breakpoint-max) {
		@include background-max;
	}
}
