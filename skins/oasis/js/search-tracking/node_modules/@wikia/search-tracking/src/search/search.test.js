import { sendEvent, validate } from './search';

const missingNestedSearchImpression = {
    "searchPhrase": "c3po",
    "filters": {
        "namespace": "100",
        "lastModified": "24h",
        "color": "red"
    },
    "results": [
        {"id": 123, "title": "C3PO", "position": 1}
    ],
    "offset": 0,
    "limit": 20,
    "sortOrder": "newest",
    "timestamp": "2018-12-12T15:50:00",
    "beaconId": "rerg8eure",
    "app": "mobile-wiki",
    "siteId": 147,
    "siteDomain": "starwars.wikia.com",
    "searchId": "djdsih283",
    "pvUniqueId": "1212-121312-123231"
}

const searchImpression = {
    "searchPhrase": "c3po",
    "filters": {
        "namespace": "100",
        "lastModified": "24h",
        "color": "red"
    },
    "results": [
        {"id": 123, "title": "C3PO", "position": 1, "thumbnail": true}
    ],
    "offset": 0,
    "limit": 20,
    "sortOrder": "newest",
    "timestamp": "2018-12-12T15:50:00",
    "beaconId": "rerg8eure",
    "app": "mobile-wiki",
    "siteId": 147,
    "siteDomain": "starwars.wikia.com",
    "searchId": "djdsih283",
    "pvUniqueId": "1212-121312-123231"
}

test('sendEvent throws exception when wrong event type is passed', () => {
    expect(() => sendEvent({
        type: "dummy",
        payload: {}
    })).toThrowError('Unrecognized event type for search tracking');
});

test('sendEvent throws exception when empty payload object is passed', () => {
    expect(() => sendEvent({
        type: "searchImpression",
        payload: {}
    })).toThrowError('One of the fileds in searchImpression is malformed or missing');
});

test('sendEvent throws exception when one of nested fields is missing', () => {
    expect(() => sendEvent({
        type: "searchImpression",
        payload: missingNestedSearchImpression
    })).toThrowError('One of the fileds in searchImpression is malformed or missing');
});

test('validate function should return true for proper data structure of an event', () => {
    expect(validate("searchImpression", searchImpression)).toBeTruthy();
})

test('searchImpression is valid if offset is set and page is not present', () => {
    var eventClone = JSON.parse(JSON.stringify(searchImpression));
    delete eventClone.page;
    eventClone.offset = 0;
    expect(validate("searchImpression", eventClone)).toBeTruthy();
})

test('searchImpression is valid if page is set and offset is not present', () => {
    var eventClone = JSON.parse(JSON.stringify(searchImpression));
    delete eventClone.offset;
    eventClone.page = 1;
    expect(validate("searchImpression", eventClone)).toBeTruthy();
})

test('searchImpression is invalid if page or offset is not provided', () => {
    var eventClone = JSON.parse(JSON.stringify(searchImpression));
    delete eventClone.offset;
    delete eventClone.page;

    expect(() => sendEvent({
        type: "searchImpression",
        payload: eventClone
    })).toThrowError('One of the fileds in searchImpression is malformed or missing');
})
