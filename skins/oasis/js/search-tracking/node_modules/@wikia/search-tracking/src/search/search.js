import validateSearchImpression from './validation/search_impression';
import validateSearchClicked from './validation/search_clicked';
import validateSuggestImpression from './validation/suggest_impression';
import validateSuggestClicked from './validation/suggest_clicked';
import Cookies from 'js-cookie';

const events = {
    searchImpression: "searchImpression",
    searchClicked: "searchClicked",
    suggestImpression: "suggestImpression",
    suggestClicked: "suggestClicked"
};

const encode = (payload) => btoa(encodeURIComponent(JSON.stringify(payload)));

export const validate = (type, payload) => {
    switch (type) {
        case events.searchImpression:
            return validateSearchImpression(payload);
        case events.searchClicked:
            return validateSearchClicked(payload);
        case events.suggestImpression:
            return validateSuggestImpression(payload);
        case events.suggestClicked:
            return validateSuggestClicked(payload);
        default:
            throw "Unrecognized event type for search tracking";
    }
};

const send = (type, data, requestURL = 'https://beacon.wikia-services.com/__track/special/') => {
    const searchRequestURL = requestURL + type + "/" + data;
    const requestElement = document.createElement('script');
    requestElement.src = searchRequestURL;

    document.head.appendChild(requestElement);
    requestElement.onload = () => {
        document.head.removeChild(requestElement);
    }
};

export const sendEvent = ({type, payload}) => {
    if(validate(type, payload)) {
        send(type, encode(payload))
    } else {
        throw `One of the fileds in ${type} is malformed or missing`
    }
};

const withCommonProperties = (payload) => {
  payload.siteDomain = window.location.host;
  payload.beaconId = Cookies.get('wikia_beacon_id');
  payload.timestamp = new Date().toISOString();

  return payload;
};

export const trackSearchImpression = (payload) => {
  sendEvent({type: events.searchImpression, payload: withCommonProperties(payload)})
};

export const trackSearchClicked = (payload) => {
  sendEvent({type: events.searchClicked, payload: withCommonProperties(payload)});
};

export const trackSuggestImpression = (payload) => {
  sendEvent({type: events.suggestImpression, payload: withCommonProperties(payload)});
};

export const trackSuggestClicked = (payload) => {
  sendEvent({type: events.suggestClicked, payload: withCommonProperties(payload)});
};
