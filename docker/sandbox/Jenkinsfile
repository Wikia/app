// todo use it when border settings for handling `-k8s` suffix will be prepared
// def sandbox = params.sandbox_name.endsWith("-k8s") ?  params.sandbox_name : params.sandbox_name + '-k8s';
def sandbox = params.sandbox_name;
def datacenter = params.datacenter
def environment = "sandbox"

def kubectlImage = "artifactory.wikia-inc.com/ops/k8s-deployer:0.0.15"
def nginxImage = "artifactory.wikia-inc.com/sus/mediawiki-sandbox-nginx"
def mediawikiImage = "artifactory.wikia-inc.com/sus/mediawiki-sandbox-php"

def rolloutStatus = 1

def render(String template, java.util.LinkedHashMap binding) {
	def engine = new groovy.text.SimpleTemplateEngine()

	return engine.createTemplate(template).make(binding).toString()
}

node("docker-daemon") {
	def imageExists = false
	def buildUser = "Anonymous"
	def appHash
	def configHash
	def imageTag

	stage("Log version") {
		def deploymentInfo

		try {
			withDockerContainer(kubectlImage) {
				deploymentInfo = sh(
					script: "kubectl --context kube-${datacenter}-prod -n prod get deployments -l app=mediawiki-" +
					sandbox
					+ " -o jsonpath='{.items[0].spec.template.metadata.labels}'",
					returnStdout: true
				)
			}

			def prevConfigVersion = sh(script: "echo \"${deploymentInfo}\" | sed 's/.*config_version:\\([^] ]*\\).*/\\1/'", returnStdout: true)
			def prevAppVersion = sh(script: "echo \"${deploymentInfo}\" | sed 's/.*app_version:\\([^] ]*\\).*/\\1/'", returnStdout: true)

			println("Updating sandbox ${sandbox}\napp - ${prevAppVersion} ==> ${params.app_branch} \nconfig - ${prevConfigVersion} ==> ${params.config_branch}")
		} catch (exc) {
			println("Deploying new sandbox named ${sandbox}\napp - ${params.app_branch} \nconfig - ${params.config_branch}")
		}
	}

	stage("Clone repositories") {
		wrap([$class: 'BuildUser']) {
			try {
				buildUser = "${BUILD_USER}"
			} catch (MissingPropertyException ex) {
				buildUser = "Jenkins"
			}
		}
		dir("app") {
			git url: "git@github.com:Wikia/app.git",
				branch: params.app_branch,
				credentialsId: "bd3cf712-39a7-4b16-979e-ff86208ab2ea"

			appHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

			println("Wikia/app commit: $appHash")
		}

		dir("config") {
			git url: "git@github.com:Wikia/config.git",
				branch: params.config_branch,
				credentialsId: "bd3cf712-39a7-4b16-979e-ff86208ab2ea"

			configHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

			println("Wikia/config commit: $configHash")
		}

		imageTag = "$appHash.$configHash"

		println("Image tag: $imageTag")
	}

	stage("Bump cachebuster and version") {
		dir("app") {
			sh('echo "<?php\n\\\$wgStyleVersion = "$(date +%s)";" > wgStyleVersion.php')
			sh('echo "' + params.app_branch + '@' + appHash + '" > wikia.version.txt')
		}

		dir("config") {
			sh('echo "' + params.config_branch + '@' + configHash + '" > wikia.version.txt')
		}
	}

	stage("Build and push images") {
		dir("app") {
			def status = sh(script: """
				curl -u ${env.JENKINS_ARTIFACTORY_USERNAME}:${env.JENKINS_ARTIFACTORY_PASSWORD} \
				-w "%{http_code}" -s -I -o /dev/null \
				-XGET "https://artifactory.wikia-inc.com/artifactory/api/storage/dockerv2-local/sus/mediawiki-sandbox-php/${imageTag}"
			""", returnStdout: true).trim()

			if (status == "200") {
				imageExists = true
			}

            if (!imageExists) {
                sh("docker pull artifactory.wikia-inc.com/sus/php-wikia-base:eb11f0c")

				// SUS-5284 - make the image a bit smaller
				sh("cp docker/.dockerignore ..")

				sh("docker build  . -f docker/sandbox/Dockerfile-nginx -t $nginxImage:$imageTag")

				// SUS-5853 - temporarily create docker image descriptor
				def template = sh(script: 'cat docker/sandbox/Dockerfile-php.template', returnStdout: true)
				def dockerImage = render(template, [
					'SANDBOX_NAME': sandbox,
					'SANDBOX_ENVIRONMENT': environment,
					'SANDBOX_DATACENTER': datacenter
				])

				sh("""cat > docker/sandbox/Dockerfile-php <<EOL
${dockerImage}
EOL""")
				sh("docker build .. -f docker/sandbox/Dockerfile-php -t $mediawikiImage:$imageTag")

				sh("docker push $nginxImage:$imageTag")
				sh("docker push $mediawikiImage:$imageTag")
			} else {
				println("Image tag ($imageTag) already exists")
			}
		}
	}

	stage('Notify Slack Channel publish') {
		sh "curl -X POST -H 'Content-type: application/json' --data '{ \"text\": \"MediaWiki with app commit <https://github.com/Wikia/app/commit/'${appHash}'|'${appHash}'> and config commit <https://github.com/Wikia/config/commit/'${configHash}'|'${configHash}'> is published by '${buildUser}'\", \"channel\": \"'${env.MW_SANDBOX_K8S_CHANNEL}'\" }' '${env.MW_SANDBOX_K8S_WEBHOOK}'"
	}

	stage("Apply new k8s descriptor") {
		dir("app") {
			def template = sh(script: 'cat docker/sandbox/sandbox.template.yaml', returnStdout: true)
			def k8s = render(template, [
				'IMAGE_TAG': imageTag,
				'SANDBOX_NAME': sandbox,
				'SANDBOX_ENVIRONMENT': environment,
				'SANDBOX_DATACENTER': datacenter,
				'APP_VERSION': params.app_branch,
				'CONFIG_VERSION': params.config_branch
			])

			sh("""cat > docker/sandbox/k8s.yaml <<EOL
${k8s}
EOL""")

			sh("cat docker/sandbox/k8s.yaml")
		}

		withDockerContainer(kubectlImage) {
			sh "kubectl --context kube-${datacenter}-prod -n prod apply -f app/docker/sandbox/k8s.yaml"
			rolloutStatus = sh(returnStatus: true, script: "kubectl --context kube-${datacenter}-prod -n prod rollout status deployment/mediawiki-'${sandbox}'")
		}
	}

	stage("Set and report job status") {
		def emoji
		def color
		if (rolloutStatus != 0) {
		 	currentBuild.result = "UNSTABLE"
		 	emoji = ":siren:"
		 	color = "#cc142c"
		} else {
			emoji = ":checkmark:"
			color = "#36a64f"
		}

		sh "curl -X POST -H 'Content-type: application/json' --data '{ \"mrkdwn_in\": [\"pretext\", \"text\"], \"color\": \"${color}\", \"pretext\": \"${emoji} MediaWiki rollout status\", \"channel\": \"${env.MW_SANDBOX_K8S_CHANNEL}\", \"fields\": [ {\"title\": \"sandbox\", \"value\": \"${sandbox}\", \"short\": true } ] }' ${env.MW_SANDBOX_K8S_WEBHOOK}"
	}
}
