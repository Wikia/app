// todo use it when border settings for handling `-k8s` suffix will be prepared
// def sandbox = params.sandbox.endsWith("-k8s") ?  params.sandbox : params.sandbox + '-k8s';

//support both long names sandbox-xw1 and short names xw1
def tokens = params.sandbox.tokenize('-')
def sandbox = tokens[tokens.size() - 1]
def datacenter = params.datacenter

def kubectlImage = "artifactory.wikia-inc.com/ops/k8s-deployer:0.0.15"
def nginxImage = "artifactory.wikia-inc.com/sus/mediawiki-sandbox-nginx"
def mediawikiImageName = params.debug ? "mediawiki-sandbox-php" : "mediawiki-php"
def mediawikiImage = "artifactory.wikia-inc.com/sus/${mediawikiImageName}"
def phpDockerFile = params.debug ? "docker/sandbox/Dockerfile-debug" : "docker/base/Dockerfile-php"

def rolloutStatus = 1

def render(String template, java.util.LinkedHashMap binding) {
  def engine = new groovy.text.SimpleTemplateEngine()

  return engine.createTemplate(template).make(binding).toString()
}

node("docker-daemon-big") {
  def buildUser = "Anonymous"
  def appHash
  def configHash
  def imageTag

  wrap([$class: 'BuildUser']) {
    try {
      buildUser = "${BUILD_USER}"
    } catch (MissingPropertyException ex) {
      buildUser = "Jenkins"
    }
  }

  stage("Fetch version") {
    def deploymentInfo

    try {
      withDockerContainer(kubectlImage) {
        deploymentInfo = sh(
          script: "kubectl --context kube-${datacenter}-prod -n prod get deployments -l app=mediawiki-sandbox-" +
          sandbox
          + " -o jsonpath='{.items[0].spec.template.metadata.labels}'",
          returnStdout: true
        )
      }

      def prevConfigVersion = sh(script: "echo \"${deploymentInfo}\" | sed 's/.*config_version:\\([^] ]*\\).*/\\1/'", returnStdout: true)
      def prevAppVersion = sh(script: "echo \"${deploymentInfo}\" | sed 's/.*app_version:\\([^] ]*\\).*/\\1/'", returnStdout: true)

      println("Updating sandbox sandbox-${sandbox}\napp - ${prevAppVersion} ==> ${params.app_branch} \nconfig - ${prevConfigVersion} ==> ${params.config_branch}")
    } catch (exc) {
      println("Deploying new sandbox named sandbox-${sandbox}\napp - ${params.app_branch} \nconfig - ${params.config_branch}")
    }
  }

  stage("Clone repositories") {
    parallel (
      "app": {
        dir("app") {
          git url: "git@github.com:Wikia/app.git",
            branch: params.app_branch,
            credentialsId: "bd3cf712-39a7-4b16-979e-ff86208ab2ea"

          appHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

          println("Wikia/app commit: $appHash")
        }
      },

      "config": {
        dir("config") {
          git url: "git@github.com:Wikia/config.git",
            branch: params.config_branch,
            credentialsId: "bd3cf712-39a7-4b16-979e-ff86208ab2ea"

          configHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

          println("Wikia/config commit: $configHash")
        }
      }
    )

    imageTag = "$appHash.$configHash"

    println("Image tag: $imageTag")
  }

  stage("Bump cachebuster and version") {
    parallel (
      "app": {
        dir("app") {
          def cacheBuster = new Date().getTime()

          sh('echo "<?php\n\\\$wgStyleVersion = ' + cacheBuster + ';" > wgStyleVersion.php')
          sh('echo "' + params.app_branch + '@' + appHash + '" > wikia.version.txt')
        }
      },

      "config": {
        dir("config") {
          sh('echo "' + params.config_branch + '@' + configHash + '" > wikia.version.txt')
        }
      }
    )
  }

  parallel (
    "php": {
      stage("Build and push php image") {
        dir("app") {
          def imageExists = false
          def status = sh(script: """
            curl -u ${env.JENKINS_ARTIFACTORY_USERNAME}:${env.JENKINS_ARTIFACTORY_PASSWORD} \
            -w "%{http_code}" -s -I -o /dev/null \
            -XGET "https://artifactory.wikia-inc.com/artifactory/api/storage/dockerv2-local/sus/${mediawikiImageName}/${imageTag}"
          """, returnStdout: true).trim()

          if (status == "200") {
            imageExists = true
          }

          if (!imageExists) {
            // SUS-5284 - make the image a bit smaller
            sh("cp docker/.dockerignore ..")
            sh("docker build .. -f $phpDockerFile -t $mediawikiImage:$imageTag")
            sh("docker push $mediawikiImage:$imageTag")
          } else {
            println("Php image tag ($imageTag) already exists")
          }
        }
      }
    },

    "nginx": {
      stage("Build and push nginx image") {
        dir("app") {
          def imageExists = false
          def status = sh(script: """
            curl -u ${env.JENKINS_ARTIFACTORY_USERNAME}:${env.JENKINS_ARTIFACTORY_PASSWORD} \
            -w "%{http_code}" -s -I -o /dev/null \
            -XGET "https://artifactory.wikia-inc.com/artifactory/api/storage/dockerv2-local/sus/mediawiki-sandbox-nginx/${imageTag}"
          """, returnStdout: true).trim()

          if (status == "200") {
            imageExists = true
          }

          if (!imageExists) {
            // SUS-5284 - make the image a bit smaller
            sh("cp docker/.dockerignore ..")
            sh("docker build . -f docker/sandbox/Dockerfile-nginx -t $nginxImage:$imageTag")
            sh("docker push $nginxImage:$imageTag")
          } else {
            println("Nginx image tag ($imageTag) already exists")
          }
        }
      }
    }
  )

  stage('Notify Slack Channel publish') {
    sh "curl -X POST -H 'Content-type: application/json' --data '{ \"text\": \"MediaWiki with app commit <https://github.com/Wikia/app/commit/'${appHash}'|'${appHash}'> and config commit <https://github.com/Wikia/config/commit/'${configHash}'|'${configHash}'> is published by '${buildUser}'\", \"channel\": \"'${env.MW_SANDBOX_K8S_CHANNEL}'\" }' '${env.MW_SANDBOX_K8S_WEBHOOK}'"
  }

  stage("Apply new k8s descriptor") {
    dir("app") {
      def template = sh(script: 'cat docker/sandbox/sandbox.template.yaml', returnStdout: true)
      def k8s = render(template, [
        'MEDIAWIKI_IMAGE': mediawikiImage,
        'IMAGE_TAG': imageTag,
        'SANDBOX_NAME': 'sandbox-' + sandbox,
        'SANDBOX_ENVIRONMENT': 'sandbox',
        'SANDBOX_DATACENTER': datacenter,
        'APP_VERSION': params.app_branch,
        'CONFIG_VERSION': params.config_branch,
        'REPLICAS': 1,
        'MAX_REPLICAS': 2
      ])

      sh("""cat > docker/sandbox/k8s.yaml <<EOL
${k8s}
EOL""")

      sh("cat docker/sandbox/k8s.yaml")
    }

    withDockerContainer(kubectlImage) {
      sh "kubectl --context kube-${datacenter}-prod -n prod apply -f app/docker/sandbox/k8s.yaml"
      rolloutStatus = sh(returnStatus: true, script: "kubectl --context kube-${datacenter}-prod -n prod rollout status deployment/mediawiki-sandbox-'${sandbox}'")
    }
  }

  stage("Set and report job status") {
    def emoji
    def color
    if (rolloutStatus != 0) {
       currentBuild.result = "UNSTABLE"
       emoji = ":siren:"
       color = "#cc142c"
    } else {
      emoji = ":checkmark:"
      color = "#36a64f"
    }

    sh "curl -X POST -H 'Content-type: application/json' --data '{ \"mrkdwn_in\": [\"pretext\", \"text\"], \"color\": \"${color}\", \"pretext\": \"${emoji} MediaWiki rollout status\", \"channel\": \"${env.MW_SANDBOX_K8S_CHANNEL}\", \"fields\": [ {\"title\": \"sandbox\", \"value\": \"sandbox-${sandbox}\", \"short\": true } ] }' ${env.MW_SANDBOX_K8S_WEBHOOK}"
  }
}
