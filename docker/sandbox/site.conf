server {
    listen 8080;
    server_name mediawiki.prod.sjc.k8s.wikia.net;
    root /usr/wikia/slot1/current/src;

    rewrite "^/health/check$" /health.php break;
    rewrite "^/proxy.php$" /extensions/wikia/Tasks/proxy/proxy.php break;

    rewrite ^/robots.txt /wikia-robots-txt.php break;
    rewrite "^/(sitemap.+\.xml(.gz)*)$" /index.php?title=Special:Sitemap/$1&uselang=en break;

    rewrite "^/(?:[a-z]{2,3}(?:-[a-z-]{2,12})?/)?__load/[^/]*/([^/]*)/([^$].+)" /load.php?modules=$2&$1 break;
    rewrite "^/(?:[a-z]{2,3}(?:-[a-z-]{2,12})?/)?__am/(\d+)/([A-Za-z]+)/([^/]*)/(.*)" /index.php?action=ajax&rs=AssetsManagerEntryPoint&cb=$1&type=$2&params=$3&oid=$4 break;

    rewrite ^/api/v1/design-system/([a-z]+)/([0-9]+)/([-a-z]+)/community-header /wikia.php?controller=DesignSystemApiController&method=getCommunityHeader&product=$1&id=$2&lang=$3 break;
    rewrite ^/api/v1/design-system/([a-z]+)/([0-9]+)/([-a-z]+)/global-footer /wikia.php?controller=DesignSystemApiController&method=getFooter&product=$1&id=$2&lang=$3 break;
    rewrite ^/api/v1/design-system/([a-z]+)/([0-9]+)/([-a-z]+)/global-navigation /wikia.php?controller=DesignSystemApiController&method=getNavigation&product=$1&id=$2&lang=$3 break;
    rewrite ^/api/v1/design-system/([a-z]+)/([0-9]+)/([-a-z]+)/ /wikia.php?controller=DesignSystemApiController&method=getAllElements&product=$1&id=$2&lang=$3 break;

    rewrite ^/api/(?:v1|test)/?$ /wikia.php?controller=ApiDocs&method=index break;
    rewrite ^/api/(?:v1|test)/([^/]*)/([^/]*) /wikia.php?controller=$1Api&method=get$2 break;

    # SUS-5798 / SUS-5824: alternative article paths - /wiki/index.php and /w
    # for sandboxes and production use X-Original-Host request header value
    rewrite "^/([a-z]{2,3}(-[a-z-]{2,12})?/)?w/(.*)$" http://$http_x_original_host/$1wiki/$3 permanent;
    rewrite "^/([a-z]{2,3}(-[a-z-]{2,12})?/)?wiki/index.php/(.*)$" http://$http_x_original_host/$1wiki/$3 permanent;

    # rewrites for language wiki
    rewrite "^/[a-z]{2,3}(?:-[a-z-]{2,12})?/(sitemap.+\.xml[.gz]*)$" /index.php?title=Special:Sitemap/$1&uselang=en break;

    rewrite "^/(?:[a-z]{2,3}(?:-[a-z-]{2,12})?/)?api.php(.*)" /api.php$1;
    # SUS-5789 force pre-existing lyricwiki API calls to use a MediaWiki-compliant query
    # it should be the last rewrite for api.php, since "if" behaviour might be unexpected otherwise (https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/)
    # this if checks if there is a "func" query param
    if ($arg_func) {
        rewrite ^(.*)$ $1?action=lyrics last;
    }

    rewrite "^/(?:[a-z]{2,3}(?:-[a-z-]{2,12})?/)?load.php(.*)" /load.php$1 break;
    rewrite "^/(?:[a-z]{2,3}(?:-[a-z-]{2,12})?/)?wikia.php(.*)" /wikia.php$1 break;

    # article URL
    rewrite "^/(?:[a-z]{2,3}(?:-[a-z-]{2,12})?/)?wiki/(.*)" /index.php?title=$1 break;

    # rewrite for language wiki root path
    rewrite "^/(?:[a-z]{2,3}(?:-[a-z-]{2,12})?/?)?$" /index.php break;

    # handle cachebuster URLs and default favicon on devboxes and local machines
    rewrite ^/(__cb\d+/)?(skins|resources|extensions)/(.+) /$2/$3 break;
    rewrite ^/favicon.ico /skins/common/images/favicon.ico break;

    # filter out unwanted directories
    location ~ ^/(lib|serialized|tests|mw-config|includes|cache|maintenance|languages|config) {
        return 403;
    }

    # SUS-5842 rewrite URLs that point to not existing PHP files
    # they are highly likely wiki articles
    # e.g. https://scratchpad.wikia.com/wiki/Scratchpad:Parameters_to_index.php

    # known MediaWiki PHP endpoints
    location ~ ^/(api|health|index|load|opensearch_desc|extensions/wikia/Tasks/proxy/proxy|redirect-canonical|server|wikia|wikia-robots-txt)\.php {
        fastcgi_read_timeout 180s;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass localhost:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        # make MediaWiki think we're running on a standard port
        # otherwise we end up with redirects to port 8080
        fastcgi_param SERVER_PORT 80;
        # use the original request host so MW can identify the specific wiki
        fastcgi_param HTTP_HOST $http_x_original_host;
        fastcgi_param SERVER_NAME $http_x_original_host;
    }

    error_page 404 = /redirect-canonical.php;
}
