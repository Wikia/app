// Generated by CoffeeScript 1.6.1
(function() {
	var ParameterView,
		__hasProp = {}.hasOwnProperty,
		__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

	ParameterView = (function(_super) {

		__extends(ParameterView, _super);

		function ParameterView() {
			return ParameterView.__super__.constructor.apply(this, arguments);
		}

		ParameterView.prototype.initialize = function() {};

		ParameterView.prototype.render = function() {
			var contentTypeModel, contentTypeView, signatureModel, signatureView, template;
			if (this.model.paramType === 'body') {
				this.model.isBody = true;
			}
			if (this.model.dataType === 'file') {
				this.model.isFile = true;
			}
			template = this.template();
			$(this.el).html(template(this.model));
			signatureModel = {
				sampleJSON: this.model.sampleJSON,
				isParam: true,
				signature: this.model.signature
			};
			if (this.model.sampleJSON) {
				signatureView = new SignatureView({
					model: signatureModel,
					tagName: 'div'
				});
				$('.model-signature', $(this.el)).append(signatureView.render().el);
			} else {
				$('.model-signature', $(this.el)).html(this.model.signature);
			}
			contentTypeModel = {
				isParam: false
			};
			if (this.model.supportedContentTypes) {
				contentTypeModel.produces = this.model.supportedContentTypes;
			}
			if (this.model.produces) {
				contentTypeModel.produces = this.model.produces;
			}
			contentTypeView = new ContentTypeView({
				model: contentTypeModel
			});
			$('.content-type', $(this.el)).append(contentTypeView.render().el);
			return this;
		};

		ParameterView.prototype.template = function() {
			if (this.model.isList) {
				return Handlebars.templates.param_list;
			} else {
				if (this.options.readOnly) {
					if (this.model.required) {
						return Handlebars.templates.param_readonly_required;
					} else {
						return Handlebars.templates.param_readonly;
					}
				} else {
					if (this.model.required) {
						return Handlebars.templates.param_required;
					} else {
						return Handlebars.templates.param;
					}
				}
			}
		};

		return ParameterView;

	})(Backbone.View);

	window.ParameterView = ParameterView; // make it public
}).call(this);
