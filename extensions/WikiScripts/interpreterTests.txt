# Test cases for MediaWiki inline scripts engine

!! article
Module:Basic mathematics
!! text
function run() {
	return -2 + 2 * 2 ** 2 - 3 * 7 % 5;
}
!! endarticle

!! test
Basic mathematics
!! input
{{#invoke:Basic mathematics|run}}
!! result
<p>5
</p>
!! end

!! article
Module:Pow associativity
!! text
function run() {
	// Not 4096
	return 4 ** 3 ** 2;
}
!! endarticle

!! test
** associativity
!! input
{{#invoke:Pow associativity|run}}
!! result
<p>262144
</p>
!! end

!! article
Module:String contecation
!! text
function add( a, b ) {
	// if you pass 3 and 7, it would be 37, because all arguments from wikitext
	// are strings
	return a + b;
}
!! endarticle

!! test
String contecation
!! input
{{#invoke:string contecation|add|3|7}}
!! result
<p>37
</p>
!! end

!! article
Module:Multiple variable assignment
!! text
function run() {
	// if you pass 3 and 7, it would be 37, because all arguments from wikitext
	// are strings
	a = b = 3;
	return a + b;
}
!! endarticle

!! test
Multiple variable assignment
!! input
{{#invoke:Multiple variable assignment|run}}
!! result
<p>6
</p>
!! end

!! article
Module:Assigment with arithmetics
!! text
function run() {
	a = 2;
	a += 3;
	a -= 7;
	a *= 3;
	a /= 5;
	return a;
}
!! endarticle

!! test
Assigment with arithmetics (+=, -=, etc)
!! input
{{#invoke:Assigment with arithmetics|run}}
!! result
<p>-1.2
</p>
!! end

!! article
Module:Boolean shortcut
!! text
function run() {
	/* Only first statement should be performed */
	!(b = 2) | (b = 3) | (b = 4);
	return b;
}
!! endarticle

!! test
Boolean shortcut
!! input
{{#invoke:boolean shortcut|run}}
!! result
<p>3
</p>
!! end

!! article
Module:Equality
!! text
function run() {
	return "2" == 2 & "2" !== 2 & 4 === (2 + 2) &
		null == "" & false == null & 0 == "";
}
!! endarticle

!! test
Equality
!! input
{{#invoke:equality|run}}
!! result
<p>1
</p>
!! end

!! article
Module:Comparisons
!! text
function run() {
	return 2 > 1 & 2 >= 2 & 2 <= 2 & 1 < 2;
}
!! endarticle

!! test
Comparsions
!! input
{{#invoke:comparisons|run}}
!! result
<p>1
</p>
!! end

!! article
Module:Trivial
!! text
function getText() {
	return "AA";
}
!! endarticle

!! test
Integration with other functions
!! input
{{lc:{{#invoke:trivial|getText}}}}
!! result
<p>aa
</p>
!! end

!! article
Module:Conditions
!! text
function run() {
	return 2 + 2 == 4 ? "a" : "b";
}
!! endarticle

!! test
Conditions (?)
!! input
{{#invoke:conditions|run}}
!! result
<p>a
</p>
!! end

!! article
Module:Conditions (if-then-else)
!! text
function run() {
	if( 2 * 7 > 3 * 4 ) {
		a = 7;
	} else {
		a = 10;
	}

	if( a ** 2 < 50 )
		return "ok";
}
!! endarticle

!! test
Conditions (if-then, if-then-else)
!! input
{{#invoke:Conditions (if-then-else)|run}}
!! result
<p>ok
</p>
!! end

!! article
Module:Bullets
!! text
function run() {
	return str_join_list( tpl_numbered_args(), "\n", "* " );
}
!! endarticle

!! article
Template:Bullets
!! text
{{#invoke:bullets|run}}
!! endarticle

!! test
args() function
!! input
{{bullets|a|b|c}}
!! result
<ul><li> a
</li><li> b
</li><li> c
</li></ul>

!! end

!! article
Module:TranscludedSwitch
!! text
function run() {
	return tpl_is_transcluded() ? tpl_arg(1) : "?!";
}
!! endarticle

!! article
Template:TranscludedSwitch
!! text
{{#invoke:TranscludedSwitch|run}}
!! endarticle

!! test
tpl_is_transcluded()/tpl_arg() check
!! input
{{TranscludedSwitch|11}}
!! result
<p>11
</p>
!! end

!! article
Module:Empty argument handling check
!! text
function run() {
	return tpl_arg("test") === null;
}
!! endarticle

!! test
Empty argument handling check
!! input
{{#invoke:Empty argument handling check|run}}
!! result
<p>1
</p>
!! end

!! article
Module:Casts
!! text
function run() {
	return string(float(2)) === "2.0" & int(7.99) === 7;
}
!! endarticle

!! test
Casts
!! input
{{#invoke:Casts|run}}
!! result
<p>1
</p>
!! end

!! article
Module:Exception handling
!! text
function run() {
	try
		2 / 0;
	catch( e )
		return e;
}
!! endarticle

!! test
Exception handling
!! input
{{#invoke:Exception handling|run}}
!! result
<p>dividebyzero
</p>
!! end

!! article
Template:Numberofsomething
!! text
721
!! endarticle

!! article
Module:Numberofsomething
!! text
function run() {
	numofsmth = int( tpl_parse( '{{numberofsomething}}' ) ) + 279;
	return '{{numberofsomething}}: ' + numofsmth;
}
!! endarticle

!! test
Template access via tpl_parse()
!! input
{{#invoke:Numberofsomething|run}}
!! result
<p>{{numberofsomething}}: 1000
</p>
!! end

!! article
Module:123
!! text
function run1() {
	return 123;
}

function run2() {
	return tpl_parse( '{{123}}' );
}
!! endarticle

!! article
Template:123
!! text
{{#invoke:123|run1}}
!! endarticle

!! test
Nested wikiscripts via tpl_parse()
!! input
{{#invoke:123|run2}}
!! result
<p>123
</p>
!! end

!! article
Module:String functions 1
!! text
function run() {
	return str_lowercase( 'FOO' ) == 'foo' & str_uppercase( 'foo' ) == 'FOO' &
		str_uppercase_first( 'bar' ) == 'Bar' & str_url_encode( 'a="b"' ) == "a%3D%22b%22";
}
!! endarticle

!! test
String functions 1
!! input
{{#invoke:String functions 1|run}}
!! result
<p>1
</p>
!! end

!! article
Module:String functions 2
!! text
function run() {
	return str_length( "тест" ) == 4 & str_sub( "слово", 1, 2 ) == "ло" &
		str_replace( "abcd", 'bc', 'ad' ) == 'aadd';
}
!! endarticle

!! test
String functions 2
!! input
{{#invoke:String functions 2|run}}
!! result
<p>1
</p>
!! end

!! article
Module:split/join
!! text
function run() {
	return str_join_list( str_split( 'a:b:c:d', ':' ), '!' ) + str_join( ' ', '', 'e', 'f' );
}
!! endarticle

!! test
split()/join()
!! input
{{#invoke:split/join|run}}
!! result
<p>a!b!c!d e f
</p>
!! end

!! article
Module:isset/delete
!! text
function run() {
	a = null;
	b = 1;
	delete( b );
	return 'a: ' + isset( a ) + '; b: ' + int( isset( b ) );
}
!! endarticle

!! test
isset/delete
!! input
{{#invoke:isset/delete|run}}
!! result
<p>a: 1; b: 0
</p>
!! end

!! article
Module:in/contains
!! text
function run() {
	return int( "a" in "b" + "c" in "cd" + "foobar" contains "oo" + "foobar" contains "baz" );
}
!! endarticle

!! test
in/contains
!! input
{{#invoke:in/contains|run}}
!! result
<p>2
</p>
!! end

#
## Lists
#

!! article
Module:Lists: basics
!! text
function run() {
	a = [ b = "a", b = "b", b = "c" ];
	return a[1] + b;
}
!! endarticle

!! test
Lists: basics
!! input
{{#invoke:Lists: basics|run}}
!! result
<p>bc
</p>
!! end

!! article
Module:Lists: foreach
!! text
function run() {
	a = [ 1, 2, 3, 4, 5 ];
	for( n in a )
		append n * n + "\n\n";
}
!! endarticle

!! test
Lists: foreach
!! input
{{#invoke:Lists: foreach|run}}
!! result
<p>1
</p><p>4
</p><p>9
</p><p>16
</p><p>25
</p>
!! end

!! article
Module:List merging
!! text
function run() {
	for( element in [ 7, 4 ] + [ 2, 8 ] + 1 )
		append string( element );
}
!! endarticle

!! test
List merging
!! input
{{#invoke:List merging|run}}
!! result
<p>74281
</p>
!! end

!! article
Module:Lists: loop control (break/continue)
!! text
function run() {
	a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ];
	for( e in a ) {
		if( e >= 6 & e < 9 )
			continue;
		append string( e );
	}
	for( e in a ) {
		if( e == 3 )
			break;
		append e;
	}
}
!! endarticle

!! test
Lists: loop control (break/continue)
!! input
{{#invoke:Lists: loop control (break/continue)|run}}
!! result
<p>12345912
</p>
!! end

!! article
Module:Lists: changing value of an element
!! text
function run() {
	a = [ [ 2, 3 ], [ 5, 6 ], 7 ];
	a[1][0] = 3;
	a[0][] = 1;
	return a;
}
!! endarticle

!! test
Lists: changing value of an element
!! input
{{#invoke:Lists: changing value of an element|run}}
!! result
<p>2
3
1
3
6
7
</p>
!! end

!! article
Module:Lists: isset
!! text
function run() {
	lst = [ 'a', 'b', 'c' ];
	return isset( lst[1] ) + isset( lst[2] ) + isset( list[3] );
}
!! endarticle

!! test
Lists: isset
!! input
{{#invoke:Lists: isset|run}}
!! result
<p>2
</p>
!! end

!! article
Module:Lists: unset
!! text
function run() {
	lst = [ 'a', 'b', 'c', 'd' ];
	delete( lst[2] );
	return lst;
}
!! endarticle

!! test
Lists: unset
!! input
{{#invoke:Lists: unset|run}}
!! result
<p>a
b
d
</p>
!! end

!! article
Module:Associated arrays: basics
!! text
function run() {
	a = { "a" : 2, "b" : 13 };
	a["c"] = 21;

	for( k : v in a ) {
		append k + " = " + v + "\n\n";
	}
}
!! endarticle

!! test
Associated arrays: basics
!! input
{{#invoke:Associated arrays: basics|run}}
!! result
<p>a = 2
</p><p>b = 13
</p><p>c = 21
</p>
!! end

!! article
Module:Associated arrays: isset/unset
!! text
function run() {
	a = { "a" : 2, "b" : 13, "c" : 48 };
	delete( a['b'] );
	a["e"] = isset( a['a'] );

	for( k : v in a ) {
		append k + " = " + v + "\n\n";
	}
}
!! endarticle

!! test
Associated arrays: isset/unset
!! input
{{#invoke:Associated arrays: isset/unset|run}}
!! result
<p>a = 2
</p><p>c = 48
</p><p>e = 1
</p>
!! end

!! article
Module:Mixed arrays
!! text
function run() {
	a["b"][][]["c"] = 11;
	return a["b"][0][0]["c"];
}
!! endarticle

!! test
Mixed arrays
!! input
{{#invoke:Mixed arrays|run}}
!! result
<p>11
</p>
!! end

!! article
Module:Using append with arrays
!! text
function testAssoc() {
	append { "a" : 2 };
	append { "b" : 3 };
}

function testList() {
	append [ 1, 2 ];
	append [ 3, 4 ];
}

function main() {
	for( k : v in self::testAssoc() ) {
		append k + " = " + v + "; ";
	}

	for( v in self::testList() ) {
		append v + "; ";
	}
}
!! endarticle

!! test
Using append with arrays
!! input
{{s:Using append with arrays}}
!! result
<p>a = 2; b = 3; 1; 2; 3; 4;
</p>
!! end
