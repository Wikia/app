<module> ::= <functions>
<functions> ::= <function> <functions> | <function>

<function> ::= function id leftbracket <args> rightbracket leftcurly <stmts> rightcurly
<function> ::= function id leftbracket rightbracket leftcurly <stmts> rightcurly
<args> ::= id comma <args> | id

<stmts> ::= <stmts> <stmt> | <stmt>
<stmt> ::= <expr> semicolon
<stmt> ::= if leftbracket <expr> rightbracket <stmt>
<stmt> ::= if leftbracket <expr> rightbracket <stmt> else <stmt>
<stmt> ::= for leftbracket  <forlvalue> in <expr> rightbracket <stmt>
<stmt> ::= try <stmt> catch leftbracket <lvalue> rightbracket <stmt>
<stmt> ::= leftcurly <stmts> rightcurly

<expr> ::= <exprReturn>
<exprReturn> ::= return | return <exprSet> | <exprSet>
<exprReturn> ::= append <exprSet> | yield <exprSet>
<exprSet> ::= <lvalue> setto <exprSet> | <exprTrinary>
<exprTrinary> ::= <exprLogical> trinary <exprTrinary> colon <exprTrinary> | <exprLogical>
<exprLogical> ::= <exprLogical> logicop <exprCompare> | <exprCompare>
<exprCompare> ::= <exprCompare> compareop <exprEquals> | <exprEquals>
<exprEquals> ::= <exprSum> equalsto <exprSum> | <exprSum>
<exprSum> ::= <exprSum> sum <exprMul> | <exprMul>
<exprMul> ::= <exprMul> mul <exprPow> | <exprPow>
<exprPow> ::= <exprInvert> pow <exprPow> | <exprInvert>
<exprInvert>  ::= invert <exprKeyword> | <exprKeyword>
<exprKeyword> ::= <exprUnary> in <exprUnary> | <exprUnary> contains <exprUnary> | <exprUnary>
<exprUnary> ::= sum <exprFunction> | <exprFunction>
<exprFunction> ::= <funcid> leftbracket <commaListPlain> rightbracket | <funcid> leftbracket rightbracket
<exprFunction> ::= <varfunc> leftbracket <lvalue> rightbracket | <exprAtom>
<exprAtom> ::= <lvalue> | <atom> | break | continue
<exprAtom> ::= leftbracket <expr> rightbracket
<exprAtom> ::= leftsquare <commaListPlain> rightsquare | leftcurly <commaListAssoc> rightcurly

<varfunc> ::= isset | delete
<funcid> ::= id | <exprAtom> doublecolon id | self doublecolon id

<commaListPlain> ::= <commaListPlain> comma <expr> | <expr>
<commaListAssoc> ::= <commaListAssoc> comma <keyValue> | <keyValue>
<keyValue> ::= <expr> colon <expr>
<atom> ::= string | int | float | true | false | null
<lvalue> ::= id | <lvalue> <arrayIdx>
<arrayIdx> ::= leftsquare <expr> rightsquare | leftsquare rightsquare
<forlvalue> ::= <lvalue> | <lvalue> colon <lvalue>
