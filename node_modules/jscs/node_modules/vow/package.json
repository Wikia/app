{
  "name": "vow",
  "version": "0.3.9",
  "description": "Promises/A+ proposal compatible promises library",
  "homepage": "https://github.com/dfilatov/jspromise",
  "keywords": [
    "nodejs",
    "browser",
    "async",
    "promise",
    "a+"
  ],
  "author": {
    "name": "Dmitry Filatov",
    "email": "dfilatov@yandex-team.ru"
  },
  "contributors": [
    {
      "name": "Dmitry Filatov",
      "email": "dfilatov@yandex-team.ru"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/dfilatov/jspromise.git"
  },
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "",
    "istanbul": "",
    "uglify-js": "1.3.4",
    "promises-aplus-tests": "1.0.0"
  },
  "main": "lib/vow",
  "engines": {
    "node": ">= 0.4.0"
  },
  "scripts": {
    "test": "./node_modules/istanbul/lib/cli.js test test/utils/runner.js"
  },
  "readme": "<a href=\"http://promises-aplus.github.com/promises-spec\"><img src=\"http://promises-aplus.github.com/promises-spec/assets/logo-small.png\" align=\"right\" /></a>\r\nVow [![Build Status](https://secure.travis-ci.org/dfilatov/jspromise.png)](http://travis-ci.org/dfilatov/jspromise)\r\n=========\r\n\r\nPromises/A+ implementation.\r\nSee https://github.com/promises-aplus/promises-spec.\r\n\r\nGetting Started\r\n---------------\r\n###In the Node.js###\r\nYou can install using Node Package Manager (npm):\r\n\r\n    npm install vow\r\n\r\n###In the Browsers###\r\n```html\r\n<script type=\"text/javascript\" src=\"vow.min.js\"></script>\r\n```\r\nAlso RequireJS module format and [YM module](https://github.com/ymaps/modules) format supported.\r\n\r\nVow has been tested in IE6+, Mozilla Firefox 3+, Chrome 5+, Safari 5+, Opera 10+.\r\n\r\nAPI\r\n---\r\n  * [Creating promise](#vowpromisevalue)\r\n  * [Promise API](#promise-api)\r\n    * [fulfill](#fulfillvalue)\r\n    * [reject](#rejectreason)\r\n    * [notify](#notifyvalue)\r\n    * [isFulfilled](#isfulfilled)\r\n    * [isRejected](#isrejected)\r\n    * [isResolved](#isresolved)\r\n    * [valueOf](#valueof)\r\n    * [then](#thenonfulfilled-onrejected-onprogress-context)\r\n    * [fail](#failonrejected-context)\r\n    * [always](#alwaysonresolved-context)\r\n    * [progress](#progressonprogress-context)\r\n    * [spread](#spreadonfulfilled-onrejected-context)\r\n    * [done](#doneonfulfilled-onrejected-onprogress-context)\r\n    * [delay](#delaydelay)\r\n    * [timeout](#timeouttimeout)\r\n    * [sync](#syncwithpromise)\r\n  * [Vow API](#vow-api)\r\n    * [isPromise](#ispromisevalue)\r\n    * [when](#whenvalue-onfulfilled-onrejected-onprogress-context) \r\n    * [fail](#failvalue-onrejected-context)\r\n    * [always](#alwaysvalue-onresolved-context)\r\n    * [progress](#progressvalue-onprogress-context)\r\n    * [spread](#spreadvalue-onfulfilled-onrejected-context) \r\n    * [done](#donevalue-onfulfilled-onrejected-onprogress-context)\r\n    * [isFulfilled](#isfulfilledvalue)\r\n    * [isRejected](#isrejectedvalue)\r\n    * [isResolved](#isresolvededvalue)\r\n    * [fulfill](#fulfillvalue-1)\r\n    * [reject](#rejectreason-1)\r\n    * [resolve](#resolvevalue)\r\n    * [invoke](#invokefn-args)\r\n    * [all](#allpromisesorvalues)\r\n    * [allResolved](#allresolvedpromisesorvalues)\r\n    * [any](#anypromisesorvalues)\r\n    * [delay](#delayvalue-delay)\r\n    * [timeout](#timeoutvalue-timeout)\r\n\r\n####Vow.promise([value])####\r\nCreate a new promise if no ````value```` given, or create a new fulfilled promise if the ````value```` is not a promise, or returns ````value```` if the given ````value```` is a promise.\r\n````javascript\r\nvar promise = Vow.promise(), // create a new promise\r\n    fulfilledPromise = Vow.promise('ok'), // create a new fulfilled promise\r\n    anotherPromise = Vow.promise(existingPromise); // anotherPromise is equal an existingPromise\r\n````\r\n###Promise API###\r\n####fulfill(value)####\r\nFulfill promise with given ````value````\r\n````javascript\r\nvar promise = Vow.promise();\r\npromise.fulfill('completed'); // fulfill promise with 'completed' value\r\n````\r\n####reject(reason)####\r\nReject promise with given ````reason````\r\n````javascript\r\nvar promise = Vow.promise();\r\npromise.reject(Error('internal error')); // reject promise with Error object\r\n````\r\n####notify(value)####\r\nNotify promise for progress with given ````value````\r\n````javascript\r\nvar promise = Vow.promise();\r\npromise.notify(20); // notify promise with 20 value\r\n````\r\n\r\n####isFulfilled()####\r\nReturns whether the promise is fulfilled\r\n````javascript\r\nvar promise = Vow.promise();\r\npromise.isFulfilled(); // returns false\r\npromise.fulfill('completed');\r\npromise.isFulfilled(); // returns true\r\n````\r\n\r\n####isRejected()####\r\nReturns whether the promise is rejected\r\n````javascript\r\nvar promise = Vow.promise();\r\npromise.isRejected(); // returns false\r\npromise.reject(Error('internal error'));\r\npromise.isRejected(); // returns true\r\n````\r\n\r\n####isResolved()####\r\nReturns whether the promise is fulfilled or rejected\r\n````javascript\r\nvar promise = Vow.promise();\r\npromise.isResolved(); // returns false\r\npromise.fulfill('completed'); // or promise.reject(Error('internal error'));\r\npromise.isResolved(); // returns true\r\n````\r\n\r\n####valueOf()####\r\nReturns value of the promise:\r\n  * value of fulfillment, if promise is fullfilled \r\n  * reason of rejection, if promise is rejected \r\n  * undefined, if promise is not resolved\r\n\r\n####then([onFulfilled], [onRejected], [onProgress], [context])####\r\nArranges for:\r\n  * ````onFulfilled```` to be called with the value after promise is fulfilled,\r\n  * ````onRejected```` to be called with the rejection reason after promise is rejected.\r\n  * ````onProgress```` to be called with the value when promise is notified for progress.\r\n  * ````context```` context of callbacks\r\n \r\nReturns a new promise. See [Promises/A+ specification](https://github.com/promises-aplus/promises-spec) for details.\r\n````javascript\r\nvar promise = Vow.promise();\r\npromise.then(\r\n    function() { }, // to be called after promise is fulfilled\r\n    function() { }, // to be called after promise is rejected\r\n    function() { } // to be called when promise is notified\r\n    );\r\n````\r\n\r\n####fail(onRejected, [context])####\r\nArranges to call ````onRejected```` with given ````context```` on the promise's rejection reason if it is rejected. Shortcut for ````then(null, onRejected)````.\r\n````javascript\r\nvar promise = Vow.promise();\r\npromise.fail(\r\n    function() { // to be called after promise is rejected\r\n    });\r\npromise.reject(Error('error'));\r\n````\r\n\r\n####always(onResolved, [context])####\r\nArranges to call ````onResolved```` with given ````context```` on the promise if it is fulfilled or rejected.\r\n````javascript\r\nvar promise = Vow.promise();\r\npromise.always(\r\n    function(promise) { // to be called after promise is fulfilled or rejected\r\n    });\r\npromise.fulfill('ok'); // or promise.reject(Error('error'));\r\n````\r\n\r\n####progress(onProgress, [context])####\r\nArranges to call ````onProgress```` with given ````context```` on the promise if it is notified.\r\nShortcut for ````then(null, null, onProgress)````.\r\n````javascript\r\nvar promise = Vow.promise();\r\npromise.notify(\r\n    function(val) { // to be called when promise is notified\r\n        console.log('performed ' + val + '% of the job'); // -> performed 20% of the job\r\n    });\r\npromise.notify(20);\r\n````\r\n\r\n####spread([onFulfilled], [onRejected], [context])####\r\nLike \"then\", but \"spreads\" the array into a variadic value handler.\r\nIt useful with [Vow.all](#allpromises), [Vow.allResolved](#allresolvedpromises) methods.\r\n````javascript\r\nvar promise1 = Vow.promise(),\r\n    promise2 = Vow.promise();\r\n\r\nVow.all([promise1, promise2]).spread(function(arg1, arg2) {\r\n    // arg1 should be \"1\", arg2 should be \"'two'\"\r\n});\r\n    \r\npromise1.fulfill(1);\r\npromise2.fulfill('two');\r\n````\r\n\r\n####done([onFulfilled], [onRejected], [onProgress], [context])####\r\nTerminate a chain of promises. If the promise is rejected, throws it as an exception in a future turn of the event loop.\r\n````javascript\r\nvar promise = Vow.promise();\r\npromise.reject(Error('Internal error'));\r\npromise.done(); // exception to be throwed\r\n````\r\n####delay(delay)####\r\nReturns a new promise that to be fulfilled after a ````delay```` milliseconds if promise is fulfilled, or immediately rejected if promise is rejected.\r\n\r\n####timeout(timeout)####\r\nReturns a new promise that to be rejected after a ````timeout```` milliseconds if promise does not resolved beforehand.\r\n````javascript\r\nvar promise = Vow.promise(),\r\n    promiseWithTimeout1 = promise.timeout(50),\r\n    promiseWithTimeout2 = promise.timeout(200);\r\n\r\nsetTimeout(\r\n    function() {\r\n        promise.fulfill('ok');\r\n    },\r\n    100);\r\n\r\npromiseWithTimeout1.fail(function(e) {\r\n    // promiseWithTimeout to be rejected after 50ms\r\n});\r\n\r\npromiseWithTimeout2.then(function(val) {\r\n    // promiseWithTimeout to be fulfilled with \"'ok'\" value\r\n});\r\n````\r\n\r\n####sync(withPromise)####\r\nSynchronize promise state with ````withPromise```` state. Shortcut for:\r\n````javascript\r\nwithPromise.then(\r\n    function(val) {\r\n        promise.fulfill(val);\r\n    },\r\n    function(err) {\r\n        promise.reject(err);\r\n    });\r\n````\r\n\r\n###Vow API###\r\n\r\n####isPromise(value)####\r\nReturns whether the given ````value```` is a promise.\r\n````javascript\r\nVow.isPromise('value'); // returns false\r\nVow.isPromise(Vow.promise()); // returns true\r\n````\r\n\r\n####when(value, [onFulfilled], [onRejected], [onProgress], [context])####\r\nStatic equivalent for [promise.then](#thenonfulfilled-onrejected-onprogress-context). If given ````value```` is not a promise, ````value```` is equivalent to fulfilled promise.\r\n\r\n####fail(value, onRejected, [context])####\r\nStatic equivalent for [promise.fail](#failonrejected-context). If given ````value```` is not a promise, ````value```` is equivalent to fulfilled promise.\r\n\r\n####always(value, onResolved, [context])####\r\nStatic equivalent for [promise.always](#alwaysonresolved-context). If given ````value```` is not a promise, ````value```` is equivalent to fulfilled promise.\r\n\r\n####progress(value, onProgress, [context])####\r\nStatic equivalent for [promise.progress](#progressonprogress-context). If given ````value```` is not a promise, ````value```` is equivalent to fulfilled promise.\r\n\r\n####spread(value, [onFulfilled], [onRejected], [context])####\r\nStatic equivalent for [promise.spread](#spreadonfulfilled-onrejected-context).\r\nIf given ````value```` is not a promise, ````value```` is equivalent to fulfilled promise.\r\n\r\n####done(value, [onFulfilled], [onRejected], [onProgress], [context]])####\r\nStatic equivalent for [promise.done](#doneonfulfilled-onrejected-onprogress-context).\r\nIf given ````value```` is not a promise, ````value```` is equivalent to fulfilled promise. \r\n\r\n####isFulfilled(value)####\r\nStatic equivalent for [promise.isFulfilled](#isfulfilled).\r\nIf given ````value```` is not a promise, ````value```` is equivalent to fulfilled promise.\r\n\r\n####isRejected(value)####\r\nStatic equivalent for [promise.isRejected](#isrejected).\r\nIf given ````value```` is not a promise, ````value```` is equivalent to fulfilled promise.\r\n\r\n####isResolved(value)####\r\nStatic equivalent for [promise.isResolved](#isresolved).\r\nIf given ````value```` is not a promise, ````value```` is equivalent to fulfilled promise.\r\n\r\n####fulfill(value)####\r\nReturns a promise that has already been fulfilled with the given ````value````. If ````value```` is a promise, returned promise will be fulfilled with fulfill/rejection value of given promise.\r\n\r\n####reject(reason)####\r\nReturns a promise that has already been rejected with the given ````reason````. If ````reason```` is a promise, returned promise will be rejected with fulfill/rejection value of given promise.\r\n\r\n####resolve(value)####\r\nReturns a promise that has already been fulfilled with the given ````value````. If ````value```` is a promise, returns ````promise````.\r\n\r\n####invoke(fn, ...args)####\r\nInvokes a given function ````fn```` with arguments ````args````. Returned promise:\r\n  * will be fulfilled with returned value if value is not a promise\r\n  * will be returned value if value is a promise\r\n  * will be rejected if function throw exception\r\n \r\n````javascript\r\nvar promise1 = Vow.invoke(function(value) {\r\n        return value;\r\n    }, 'ok'),\r\n    promise2 = Vow.invoke(function() {\r\n        throw Error();\r\n    });\r\n\r\npromise1.isFulfilled(); // true\r\npromise1.valueOf(); // 'ok'\r\npromise2.isRejected(); // true\r\npromise2.valueOf(); // instance of Error\r\n````\r\n\r\n####all(promisesOrValues)####\r\nReturns a promise to be fulfilled only after all items in ````promisesOrValues```` is fulfilled, or to be rejected when the any promise is rejected.\r\n\r\n````promisesOrValues```` can be Array:\r\n````javascript\r\nvar promise1 = Vow.promise(),\r\n    promise2 = Vow.promise();\r\n    \r\nVow.all([promise1, promise2, 3])\r\n    .then(function(value) {\r\n        // value is [1, 2, 3]\r\n    });\r\n\r\npromise1.fulfill(1);\r\npromise2.fulfill(2);\r\n````\r\nor Object:\r\n````javascript\r\nvar promise1 = Vow.promise(),\r\n    promise2 = Vow.promise();\r\n    \r\nVow.all({ a : promise1, b : promise2, c : 3 })\r\n    .then(function(value) {\r\n        // value is { a : 1, b : 2, c : 3 }\r\n    });\r\n\r\npromise1.fulfill(1);\r\npromise2.fulfill(2);\r\n````\r\n\r\n####allResolved(promisesOrValues)####\r\nReturns a promise to be fulfilled only after all items in ````promisesOrValues```` is resolved.\r\n````javascript\r\nvar promise1 = Vow.promise(),\r\n    promise2 = Vow.promise();\r\n    \r\nVow.allResolved([promise1, promise2])\r\n    .spread(function(promise1, promise2) {\r\n        promise1.valueOf(); // returns 'error'\r\n        promise2.valueOf(); // returns 'ok'\r\n    });\r\n\r\npromise1.reject('error');\r\npromise2.fulfill('ok');\r\n````\r\n\r\n####any(promisesOrValues)####\r\nReturns a promise to be fulfilled only any item in ````promisesOrValues```` is fulfilled, or to be rejected when all items is rejected (with reason of first rejected item).\r\n\r\n####delay(value, delay)####\r\nStatic equivalent for [promise.delay](#delaydelay). If given ````value```` is not a promise, ````value```` is equivalent to fulfilled promise.\r\n\r\n####timeout(value, timeout)####\r\nStatic equivalent for [promise.timeout](#timeouttimeout). If given ````value```` is not a promise, ````value```` is equivalent to fulfilled promise.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dfilatov/jspromise/issues"
  },
  "_id": "vow@0.3.9",
  "dist": {
    "shasum": "25f248f20609309ce79f5f3740f8e2545fa5760e"
  },
  "_from": "vow@0.3.9",
  "_resolved": "https://registry.npmjs.org/vow/-/vow-0.3.9.tgz"
}
