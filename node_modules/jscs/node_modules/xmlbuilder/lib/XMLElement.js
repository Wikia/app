// Generated by CoffeeScript 1.6.1
(function() {
  var XMLAttribute, XMLElement, XMLNode, XMLProcessingInstruction, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore');

  XMLNode = require('./XMLNode');

  XMLAttribute = require('./XMLAttribute');

  XMLProcessingInstruction = require('./XMLProcessingInstruction');

  module.exports = XMLElement = (function(_super) {

    __extends(XMLElement, _super);

    function XMLElement(parent, name, attributes) {
      var attName, attValue;
      XMLElement.__super__.constructor.call(this, parent);
      if (name == null) {
        throw new Error("Missing element name");
      }
      this.name = this.stringify.eleName(name);
      if (attributes == null) {
        attributes = {};
      }
      this.children = [];
      this.instructions = [];
      this.attributes = {};
      for (attName in attributes) {
        if (!__hasProp.call(attributes, attName)) continue;
        attValue = attributes[attName];
        if ((attName != null) && (attValue != null)) {
          this.attributes[attName] = new XMLAttribute(this, attName, attValue);
        }
      }
    }

    XMLElement.prototype.clone = function(deep) {
      var clonedSelf;
      clonedSelf = new XMLElement(this.parent, this.name, this.attributes, this.value);
      if (deep) {
        this.children.forEach(function(child) {
          var clonedChild;
          clonedChild = child.clone(deep);
          clonedChild.parent = clonedSelf;
          return clonedSelf.children.push(clonedChild);
        });
      }
      return clonedSelf;
    };

    XMLElement.prototype.attribute = function(name, value) {
      var _ref;
      if (name == null) {
        throw new Error("Missing attribute name");
      }
      if (value == null) {
        throw new Error("Missing attribute value");
      }
      if ((_ref = this.attributes) == null) {
        this.attributes = {};
      }
      this.attributes[name] = new XMLAttribute(this, name, value);
      return this;
    };

    XMLElement.prototype.removeAttribute = function(name) {
      if (name == null) {
        throw new Error("Missing attribute name");
      }
      delete this.attributes[name];
      return this;
    };

    XMLElement.prototype.instruction = function(target, value) {
      var instruction;
      instruction = new XMLProcessingInstruction(this, target, value);
      this.instructions.push(instruction);
      return this;
    };

    XMLElement.prototype.toString = function(options, level) {
      var att, child, indent, instruction, name, newline, pretty, r, space, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (options != null ? options.indent : void 0) || '  ';
      newline = (options != null ? options.newline : void 0) || '\n';
      level || (level = 0);
      space = new Array(level + 1).join(indent);
      r = '';
      _ref = this.instructions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        instruction = _ref[_i];
        r += instruction.toString(options, level + 1);
      }
      if (pretty) {
        r += space;
      }
      r += '<' + this.name;
      _ref1 = this.attributes;
      for (name in _ref1) {
        if (!__hasProp.call(_ref1, name)) continue;
        att = _ref1[name];
        r += att.toString(options);
      }
      if (this.children.length === 0) {
        r += '/>';
        if (pretty) {
          r += newline;
        }
      } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {
        r += '>';
        r += this.children[0].value;
        r += '</' + this.name + '>';
        r += newline;
      } else {
        r += '>';
        if (pretty) {
          r += newline;
        }
        _ref2 = this.children;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          child = _ref2[_j];
          r += child.toString(options, level + 1);
        }
        if (pretty) {
          r += space;
        }
        r += '</' + this.name + '>';
        if (pretty) {
          r += newline;
        }
      }
      return r;
    };

    XMLElement.prototype.att = function(name, value) {
      return this.attribute(name, value);
    };

    XMLElement.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLElement.prototype.a = function(name, value) {
      return this.attribute(name, value);
    };

    XMLElement.prototype.i = function(target, value) {
      return this.instruction(target, value);
    };

    return XMLElement;

  })(XMLNode);

}).call(this);
