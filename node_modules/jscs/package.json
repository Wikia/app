{
  "author": {
    "name": "Marat Dulin",
    "email": "mdevils@yandex.ru"
  },
  "description": "JavaScript Style Checker",
  "name": "jscs",
  "version": "1.2.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/mdevils/node-jscs"
  },
  "contributors": [
    {
      "name": "Marat Dulin",
      "email": "mdevils@yandex.ru"
    },
    {
      "name": "Konstantin Ikonnikov",
      "email": "ikokostya@gmail.com"
    },
    {
      "name": "Igor Agarlev"
    },
    {
      "name": "Alexey Androsov",
      "email": "doochik@ya.ru"
    },
    {
      "name": "Oleg Gaidarenko",
      "email": "markelog@gmail.com"
    },
    {
      "name": "Mike Sherov",
      "email": "mike.sherov@gmail.com"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "esprima": "1.0.3",
    "vow": "0.3.9",
    "vow-fs": "0.2.3",
    "colors": "0.6.0-1",
    "commander": "1.2.0",
    "minimatch": "0.2.12",
    "glob": "3.2.7",
    "xmlbuilder": "1.1.2"
  },
  "devDependencies": {
    "jshint": "2.1.3",
    "mocha": "1.11.0",
    "browserify": "2.35.0",
    "xml2js": "0.4.0",
    "hooker": "0.2.3"
  },
  "bin": {
    "jscs": "./bin/jscs"
  },
  "scripts": {
    "test": "jshint . && node bin/jscs lib test bin && mocha -u bdd -R spec",
    "browserify": "browserify --standalone JscsStringChecker lib/string-checker.js -o jscs-browser.js"
  },
  "readme": "# node-jscs [![Build Status](https://travis-ci.org/mdevils/node-jscs.png?branch=master)](https://travis-ci.org/mdevils/node-jscs)\n\n\nJSCS â€” JavaScript Code Style.\n\n`jscs` is a code style checker. `jscs` can check cases, which are not implemeted in jshint,\nbut it does not duplicate `jshint` functionality, so you should use `jscs` and `jshint` together.\n\n## Friendly packages\n\n * Grunt task: https://github.com/gustavohenke/grunt-jscs-checker\n * Gulp task: https://github.com/sindresorhus/gulp-jscs\n\n## Installation\n\n`jscs` can be installed using `npm`:\n\n```\nnpm install jscs\n```\n\nTo run `jscs`, you can use the following command from the project root:\n\n```\n./node_modules/.bin/jscs path[ path[...]]\n```\n\n## Configuration\n\n`jscs` is configured using [.jscs.json](.jscs.json) file, located in the project root.\n\n### requireCurlyBraces\n\nRequires curly braces after statements.\n\nType: `Array`\n\nValues: Arrow of quoted keywords\n\n#### Example\n\n```js\n\"requireCurlyBraces\": [\n    \"if\",\n    \"else\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"try\",\n    \"catch\",\n    \"case\",\n    \"default\"\n]\n```\n\n##### Valid\n\n```js\nif (x) {\n    x++;\n}\n```\n\n##### Invalid\n\n```js\nif (x) x++;\n```\n\n### requireSpaceAfterKeywords\n\nRequires space after keyword.\n\nType: `Array`\n\nValues: Array of quoted keywords\n\n#### Example\n\n```js\n\"requireSpaceAfterKeywords\": [\n    \"if\",\n    \"else\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"switch\",\n    \"return\",\n    \"try\",\n    \"catch\"\n]\n```\n\n##### Valid\n\n```js\nreturn true;\n```\n\n##### Invalid\n\n```js\nif(x) {\n    x++;\n}\n```\n\n### disallowSpaceAfterKeywords\n\nDisallows space after keyword.\n\nType: `Array`\n\nValues: Array of quoted keywords\n\n#### Example\n\n```js\n\"disallowSpaceAfterKeywords\": [\n    \"if\",\n    \"else\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"switch\",\n    \"try\",\n    \"catch\"\n]\n```\n\n##### Valid\n\n```js\nif(x > y) {\n    y++;\n}\n```\n\n### requireParenthesesAroundIIFE\n\nRequires parentheses around immediately invoked function expressions.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireParenthesesAroundIIFE\": true\n```\n\n##### Valid\n\n```js\nvar a = (function(){ return 1; })();\nvar b = (function(){ return 2; }());\nvar c = (function(){ return 3; }).call(this, arg1);\nvar d = (function(){ return 3; }.call(this, arg1));\nvar e = (function(){ return d; }).apply(this, args);\nvar f = (function(){ return d; }.apply(this, args));\n```\n\n##### Invalid\n\n```js\nvar a = function(){ return 1; }();\nvar c = function(){ return 3; }.call(this, arg1);\nvar d = function(){ return d; }.apply(this, args);\n```\n\n### requireSpacesInFunctionExpression\n\nRequires space before `()` or `{}` in function declarations.\n\nType: `Object`\n\nValues: `beforeOpeningRoundBrace` and `beforeOpeningCurlyBrace` as child properties. Child properties must be set to `true`.\n\n#### Example\n\n```js\n\"requireSpacesInFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n}\n```\n\n##### Valid\n\n```js\nfunction () {}\nfunction a () {}\n```\n\n##### Invalid\n\n```js\nfunction() {}\nfunction (){}\n```\n\n\n### disallowSpacesInFunctionExpression\n\nDisallows space before `()` or `{}` in function declarations.\n\nType: `Object`\n\nValues: `\"beforeOpeningRoundBrace\"` and `\"beforeOpeningCurlyBrace\"` as child properties. Child properties must be set to `true`.\n\n#### Example\n\n```js\n\"disallowSpacesInFunctionExpression\": {\n    \"beforeOpeningRoundBrace\": true,\n    \"beforeOpeningCurlyBrace\": true\n}\n```\n\n##### Valid\n\n```js\nfunction(){}\nfunction a(){}\n```\n\n##### Invalid\n\n```js\nfunction () {}\nfunction a (){}\n```\n\n\n### disallowMultipleVarDecl\n\nDisallows multiple `var` declaration (except for-loop).\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowMultipleVarDecl\": true\n```\n\n##### Valid\n\n```js\nvar x = 1;\nvar y = 2;\n\nfor (var i = 0, j = arr.length; i < j; i++) {}\n```\n\n##### Invalid\n\n```js\nvar x = 1,\n    y = 2;\n```\n\n### requireMultipleVarDecl\n\nRequires multiple `var` declaration.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireMultipleVarDecl\": true\n```\n\n##### Valid\n\n```js\nvar x = 1,\n    y = 2;\n```\n\n##### Invalid\n\n```js\nvar x = 1;\nvar y = 2;\n```\n\n### disallowEmptyBlocks\n\nDisallows empty blocks (except for catch blocks).\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowEmptyBlocks\": true\n```\n\n##### Valid\n\n```js\nif ( a == b ) { c = d; }\ntry { a = b; } catch( e ){}\n```\n\n##### Invalid\n\n```js\nif ( a == b ) { } else { c = d; }\n```\n\n### disallowSpacesInsideObjectBrackets\n\nDisallows space after opening object curly brace and before closing.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowSpacesInsideObjectBrackets\": true\n```\n\n##### Valid\n\n```js\nvar x = {a: 1};\n```\n\n##### Invalid\n\n```js\nvar x = { a: 1 };\n```\n\n### disallowSpacesInsideArrayBrackets\n\nDisallows space after opening array square bracket and before closing.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowSpacesInsideArrayBrackets\": true\n```\n\n##### Valid\n\n```js\nvar x = [1];\n```\n\n##### Invalid\n\n```js\nvar x = [ 1 ];\n```\n\n### disallowSpacesInsideParentheses\n\nDisallows space after opening round bracket and before closing.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowSpacesInsideParentheses\": true\n```\n\n##### Valid\n\n```js\nvar x = (1 + 2) * 3;\n```\n\n##### Invalid\n\n```js\nvar x = ( 1 + 2 ) * 3;\n```\n\n### requireSpacesInsideObjectBrackets\n\nRequires space after opening object curly brace and before closing.\n\nType: `String`\n\nValues: `\"all\"` for strict mode, `\"allButNested\"` ignores closing brackets in a row.\n\n#### Example\n\n```js\n\"requireSpacesInsideObjectBrackets\": \"all\"\n```\n\n##### Valid for mode `\"all\"`\n\n```js\nvar x = { a: { b: 1 } };\n```\n\n##### Valid for mode `\"allButNested\"`\n\n```js\nvar x = { a: { b: 1 }};\n```\n\n##### Invalid\n\n```js\nvar x = {a: 1};\n```\n\n### requireSpacesInsideArrayBrackets\n\nRequires space after opening array square bracket and before closing.\n\nType: `String`\n\nValues: \"all\" for strict mode, \"allButNested\" ignores closing brackets in a row.\n\n#### Example\n\n```js\n\"requireSpacesInsideArrayBrackets\": \"all\"\n```\n\n##### Valid for mode `\"all\"`\n\n```js\nvar x = [ 1 ];\n```\n\n##### Valid for mode `\"allButNested\"`\n\n```js\nvar x = [[ 1 ], [ 2 ]];\n```\n\n##### Invalid\n\n```js\nvar x = [1];\n```\n\n### disallowQuotedKeysInObjects\n\nDisallows quoted keys in object if possible.\n\nType: `String` or `Boolean`\n\nValues:\n\n - `true` for strict mode\n - `\"allButReserved\"` allows ES3+ reserved words to remain quoted which is helpfull when using this option with JSHint's `es3` flag.\n\n#### Example\n\n```js\n\"disallowQuotedKeysInObjects\": true\n```\n\n##### Valid for mode `true`\n\n```js\nvar x = { a: { default: 1 } };\n```\n\n##### Valid for mode `\"allButReserved\"`\n\n```js\nvar x = {a: 1, 'default': 2};\n```\n\n##### Invalid\n\n```js\nvar x = {'a': 1};\n```\n\n### disallowDanglingUnderscores\n\nDisallows identifiers that start or end in `_`, except for some popular exceptions:\n\n - `_` (underscore.js)\n - `__filename` (node.js global)\n - `__dirname` (node.js global)\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowDanglingUnderscores\": true\n```\n\n##### Valid\n\n```js\nvar x = 1;\nvar y = _.extend;\nvar z = __dirname;\nvar w = __filename;\nvar x_y = 1;\n```\n\n##### Invalid\n\n```js\nvar _x = 1;\nvar x_ = 1;\nvar x_y_ = 1;\n```\n\n### disallowSpaceAfterObjectKeys\n\nDisallows space after object keys.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowSpaceAfterObjectKeys\": true\n```\n\n##### Valid\n```js\nvar x = {a: 1};\n```\n##### Invalid\n```js\nvar x = {a : 1};\n```\n\n### requireSpaceAfterObjectKeys\n\nRequires space after object keys.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireSpaceAfterObjectKeys\": true\n```\n\n##### Valid\n```js\nvar x = {a : 1};\n```\n##### Invalid\n```js\nvar x = {a: 1};\n```\n\n### disallowCommaBeforeLineBreak\n\nDisallows commas as last token on a line in lists.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowCommaBeforeLineBreak\": true\n```\n\n##### Valid\n\n```js\nvar x = {\n    one: 1\n    , two: 2\n};\nvar y = { three: 3, four: 4};\n```\n\n##### Invalid\n\n```js\nvar x = {\n    one: 1,\n    two: 2\n};\n```\n\n### requireCommaBeforeLineBreak\n\nRequires commas as last token on a line in lists.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireCommaBeforeLineBreak\": true\n```\n\n##### Valid\n\n```js\nvar x = {\n    one: 1,\n    two: 2\n};\nvar y = { three: 3, four: 4};\n```\n\n##### Invalid\n\n```js\nvar x = {\n    one: 1\n    , two: 2\n};\n```\n\n### requireAlignedObjectValues\n\nRequires proper alignment in object literals.\n\nType: `String`\n\nValues:\n    - `\"all\"` for strict mode,\n    - `\"skipWithFunction\"` ignores objects if one of the property values is a function expression,\n    - `\"skipWithLineBreak\"` ignores objects if there are line breaks between properties\n\n#### Example\n\n```js\n\"requireAlignedObjectValues\": \"all\"\n```\n\n##### Valid\n```js\nvar x = {\n    a   : 1,\n    bcd : 2,\n    ef  : 'str'\n};\n```\n##### Invalid\n```js\nvar x = {\n    a : 1,\n    bcd : 2,\n    ef : 'str'\n};\n```\n\n### requireOperatorBeforeLineBreak\n\nRequires operators to appear before line breaks and not after.\n\nType: `Array`\n\nValues: Array of quoted operators\n\n#### Example\n\n```js\n\"requireOperatorBeforeLineBreak\": [\n    \"?\",\n    \"+\",\n    \"-\",\n    \"/\",\n    \"*\",\n    \"=\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\"\n]\n```\n\n##### Valid\n\n```js\nx = y ? 1 : 2;\nx = y ?\n    1 : 2;\n```\n\n##### Invalid\n\n```js\nx = y\n    ? 1 : 2;\n```\n\n### disallowLeftStickedOperators\n\nDisallows sticking operators to the left.\n\nType: `Array`\n\nValues: Array of quoted operators\n\n#### Example\n\n```js\n\"disallowLeftStickedOperators\": [\n    \"?\",\n    \"+\",\n    \"-\",\n    \"/\",\n    \"*\",\n    \"=\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\"\n]\n```\n\n##### Valid\n\n```js\nx = y ? 1 : 2;\n```\n\n##### Invalid\n\n```js\nx = y? 1 : 2;\n```\n\n### requireRightStickedOperators\n\nRequires sticking operators to the right.\n\nType: `Array`\n\nValues: Array of quoted operators\n\n#### Example\n\n```js\n\"requireRightStickedOperators\": [\"!\"]\n```\n\n##### Valid\n\n```js\nx = !y;\n```\n\n##### Invalid\n\n```js\nx = ! y;\n```\n\n### disallowRightStickedOperators\n\nDisallows sticking operators to the right.\n\nType: `Array`\n\nValues: Array of quoted operators\n\n#### Example\n\n```js\n\"disallowRightStickedOperators\": [\n    \"?\",\n    \"+\",\n    \"/\",\n    \"*\",\n    \":\",\n    \"=\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\"\n]\n```\n\n##### Valid\n```js\nx = y + 1;\n```\n##### Invalid\n```js\nx = y +1;\n```\n\n### requireLeftStickedOperators\n\nRequires sticking operators to the left.\n\nType: `Array`\n\nValues: Array of quoted operators\n\n#### Example\n\n```js\n\"requireLeftStickedOperators\": [\",\"]\n```\n\n##### Valid\n\n```js\nx = [1, 2];\n```\n\n##### Invalid\n\n```js\nx = [1 , 2];\n```\n\n### disallowSpaceAfterPrefixUnaryOperators\n\nRequires sticking unary operators to the right.\n\nType: `Array`\n\nValues: Array of quoted operators\n\n#### Example\n\n```js\n\"disallowSpaceAfterPrefixUnaryOperators\": [\"++\", \"--\", \"+\", \"-\", \"~\", \"!\"]\n```\n\n##### Valid\n\n```js\nx = !y; y = ++z;\n```\n\n##### Invalid\n\n```js\nx = ! y; y = ++ z;\n```\n\n### requireSpaceAfterPrefixUnaryOperators\n\nDisallows sticking unary operators to the right.\n\nType: `Array`\n\nValues: Array of quoted operators\n\n#### Example\n\n```js\n\"requireSpaceAfterPrefixUnaryOperators\": [\"++\", \"--\", \"+\", \"-\", \"~\", \"!\"]\n```\n\n##### Valid\n\n```js\nx = ! y; y = ++ z;\n```\n\n##### Invalid\n\n```js\nx = !y; y = ++z;\n```\n\n### disallowSpaceBeforePostfixUnaryOperators\n\nRequires sticking unary operators to the left.\n\nType: `Array`\n\nValues: Array of quoted operators\n\n#### Example\n\n```js\n\"disallowSpaceBeforePostfixUnaryOperators\": [\"++\", \"--\"]\n```\n\n##### Valid\n\n```js\nx = y++; y = z--;\n```\n\n##### Invalid\n\n```js\nx = y ++; y = z --;\n```\n\n### requireSpaceBeforePostfixUnaryOperators\n\nDisallows sticking unary operators to the left.\n\nType: `Array`\n\nValues: Array of quoted operators\n\n#### Example\n\n```js\n\"requireSpaceBeforePostfixUnaryOperators\": [\"++\", \"--\"]\n```\n\n##### Valid\n\n```js\nx = y ++; y = z --;\n```\n##### Invalid\n\n```js\nx = y++; y = z--;\n```\n\n### disallowSpaceBeforeBinaryOperators\n\nRequires sticking binary operators to the left.\n\nType: `Array`\n\nValues: Array of quoted operators\n\n#### Example\n\n```js\n\"disallowSpaceBeforeBinaryOperators\": [\n    \"+\",\n    \"-\",\n    \"/\",\n    \"*\",\n    \"=\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\"\n]\n```\n\n##### Valid\n\n```js\nx+ y;\n```\n\n##### Invalid\n\n```js\nx + y;\n```\n\n### requireSpaceBeforeBinaryOperators\n\nDisallows sticking binary operators to the left.\n\nType: `Array`\n\nValues: Array of quoted operators\n\n#### Example\n\n```js\n\"requireSpaceBeforeBinaryOperators\": [\n    \"+\",\n    \"-\",\n    \"/\",\n    \"*\",\n    \"=\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\"\n]\n```\n\n##### Valid\n\n```js\nx !== y;\n```\n\n##### Invalid\n\n```js\nx!== y;\n```\n\n### disallowSpaceAfterBinaryOperators\n\nRequires sticking binary operators to the right.\n\nType: `Array`\n\nValues: Array of quoted operators\n\n#### Example\n\n```js\n\"disallowSpaceAfterBinaryOperators\": [\n    \"+\",\n    \"-\",\n    \"/\",\n    \"*\",\n    \"=\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\"\n]\n```\n\n##### Valid\n\n```js\nx +y;\n```\n\n##### Invalid\n\n```js\nx+ y;\n```\n\n### requireSpaceAfterBinaryOperators\n\nDisallows sticking binary operators to the right.\n\nType: `Array`\n\nValues: Array of quoted operators\n\n#### Example\n\n```js\n\"requireSpaceAfterBinaryOperators\": [\n    \"+\",\n    \"-\",\n    \"/\",\n    \"*\",\n    \"=\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\"\n]\n```\n\n##### Valid\n\n```js\nx + y;\n```\n\n##### Invalid\n\n```js\nx +y;\n```\n\n### disallowImplicitTypeConversion\n\nDisallows implicit type conversion.\n\nType: `Array`\n\nValues: Array of quoted types\n\n#### Example\n\n```js\n\"disallowImplicitTypeConversion\": [\"numeric\", \"boolean\", \"binary\", \"string\"]\n```\n\n##### Valid\n\n```js\nx = Boolean(y);\nx = Number(y);\nx = String(y);\nx = s.indexOf('.') !== -1;\n```\n\n##### Invalid\n\n```js\nx = !!y;\nx = +y;\nx = '' + y;\nx = ~s.indexOf('.');\n```\n\n### requireCamelCaseOrUpperCaseIdentifiers\n\nRequires identifiers to be camelCased or UPPERCASE_WITH_UNDERSCORES\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireCamelCaseOrUpperCaseIdentifiers\": true\n```\n\n##### Valid\n\n```js\nvar camelCase = 0;\nvar CamelCase = 1;\nvar _camelCase = 2;\nvar camelCase_ = 3;\nvar UPPER_CASE = 4;\n```\n\n##### Invalid\n\n```js\nvar lower_case = 1;\nvar Mixed_case = 2;\nvar mixed_Case = 3;\n```\n\n### disallowKeywords\n\nDisallows usage of specified keywords.\n\nType: `Array`\n\nValues: Array of quoted keywords\n\n#### Example\n\n```js\n\"disallowKeywords\": [\"with\"]\n```\n\n##### Invalid\n\n```js\nwith (x) {\n    prop++;\n}\n```\n## disallowMultipleLineStrings\n\nDisallows strings that span multiple lines without using concatenation.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowMultipleLineStrings\": true\n```\n\n##### Valid\n```js\nvar x = \"multi\" +\n        \"line\";\nvar y = \"single line\";\n```\n\n##### Invalid\n```js\nvar x = \"multi \\\n        line\";\n```\n\n## disallowMultipleLineBreaks\n\nDisallows multiple blank lines in a row.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowMultipleLineBreaks\": true\n```\n\n##### Valid\n```js\nvar x = 1;\n\nx++;\n```\n\n##### Invalid\n```js\nvar x = 1;\n\n\nx++;\n```\n\n### validateLineBreaks\n\nOption to check line break characters\n\nType: `String`\n\nValues: `\"CR\"`, `\"LF\"`, `\"CRLF\"`\n\n#### Example\n\n```js\n\"validateLineBreaks\": \"LF\"\n```\n\n##### Valid\n```js\nvar x = 1;<LF>\nx++;\n```\n\n##### Invalid\n```js\nvar x = 1;<CRLF>\nx++;\n```\n\n### validateQuoteMarks\n\nRequires all quote marks to be either the supplied value, or consistent if `true`\n\nType: `String`\n\nValues: `\"\\\"\"`, `\"'\"`, `true`\n\n#### Example\n\n```js\n\"validateQuoteMarks\": \"\\\"\"\n```\n\n##### Valid example for mode `\"\\\"\"` or mode `true`\n\n```js\nvar x = \"x\";\n```\n\n##### Valid example for mode `\"'\"` or mode `true`\n\n```js\nvar x = 'x';\n```\n\n##### Invalid example for mode `true`\n\n```js\nvar x = \"x\", y = 'y';\n```\n\n### validateIndentation\n\nValidates indentation for arrays, objects, switch statements, and block statements\n\nType: `Integer` or `String`\n\nValues: A positive integer or `\"\\t\"`\n\n#### Example\n\n```js\n\"validateIndentation\": \"\\t\",\n```\n\n##### Valid example for mode `2`\n\n```js\nif (a) {\n  b=c;\n  function(d) {\n    e=f;\n  }\n}\n```\n\n##### Invalid example for mode `2`\n\n```js\nif (a) {\n   b=c;\nfunction(d) {\n       e=f;\n}\n}\n```\n\n##### Valid example for mode \"\\t\"\n\n```js\nif (a) {\n    b=c;\n    function(d) {\n        e=f;\n    }\n}\n```\n\n##### Invalid example for mode \"\\t\"\n\n```js\nif (a) {\n     b=c;\nfunction(d) {\n           e=f;\n }\n}\n```\n\n#### disallowMixedSpacesAndTabs\n\nRequires lines to not contain both spaces and tabs consecutively,\nor spaces after tabs only for alignment if \"smart\"\n\nType: `Boolean` or `String`\n\nValues: `true` or `\"smart\"`\n\n#### Example\n\n```js\n\"disallowMixedSpacesAndTabs\": true\n```\n\n##### Valid example for mode `true`\n\n```js\n\\tvar foo = \"blah blah\";\n\\s\\s\\s\\svar foo = \"blah blah\";\n\\t/**\n\\t\\s*\n\\t\\s*/ //a single space to align the star in a docblock is allowed\n```\n\n##### Invalid example for mode `true`\n\n```js\n\\t\\svar foo = \"blah blah\";\n\\s\\tsvar foo = \"blah blah\";\n```\n\n##### Valid example for mode `\"smart\"`\n\n```js\n\\tvar foo = \"blah blah\";\n\\t\\svar foo = \"blah blah\";\n\\s\\s\\s\\svar foo = \"blah blah\";\n\\t/**\n\\t\\s*\n\\t\\s*/ //a single space to align the star in a docblock is allowed\n```\n\n##### Invalid example for mode `\"smart\"`\n\n```js\n\\s\\tsvar foo = \"blah blah\";\n```\n\n### disallowTrailingWhitespace\n\nRequires all lines to end on a non-whitespace character\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"disallowTrailingWhitespace\": true\n```\n\n##### Valid\n\n```js\nvar foo = \"blah blah\";\n```\n\n##### Invalid\n\n```js\nvar foo = \"blah blah\"; //<-- whitespace character here\n```\n\n### disallowKeywordsOnNewLine\n\nDisallows placing keywords on a new line.\n\nType: `Array`\n\nValues: Array of quoted keywords\n\n#### Example\n\n```js\n\"disallowKeywordsOnNewLine\": [\"else\"]\n```\n\n##### Valid\n\n```js\nif (x < 0) {\n    x++;\n} else {\n    x--;\n}\n```\n\n##### Invalid\n\n```js\nif (x < 0) {\n    x++;\n}\nelse {\n    x--;\n}\n```\n\n### requireKeywordsOnNewLine\n\nRequires placing keywords on a new line.\n\nType: `Array`\n\nValues: Array of quoted keywords\n\n#### Example\n\n```js\n\"requireKeywordsOnNewLine\": [\"else\"]\n```\n\n##### Valid\n\n```js\nif (x < 0) {\n    x++;\n}\nelse {\n    x--;\n}\n```\n\n##### Invalid\n\n```js\nif (x < 0) {\n    x++;\n} else {\n    x--;\n}\n```\n\n### requireLineFeedAtFileEnd\n\nRequires placing line feed at file end.\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireLineFeedAtFileEnd\": true\n```\n\n### maximumLineLength\n\nRequires all lines to be at most the number of characters specified\n\nType: `Integer`\n\nValues: A positive integer\n\n#### Example\n\n```js\n\"maximumLineLength\": 40\n```\n\n##### Valid\n\n```js\nvar aLineOf40Chars = 123456789012345678;\n```\n\n##### Invalid\n\n```js\nvar aLineOf41Chars = 1234567890123456789;\n```\n\n### requireCapitalizedConstructors\n\nRequires constructors to be capitalized (except for `this`)\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireCapitalizedConstructors\": true\n```\n\n##### Valid\n\n```js\nvar a = new B();\nvar c = new this();\n```\n\n##### Invalid\n\n```js\nvar d = new e();\n```\n\n### safeContextKeyword\n\nOption to check `var that = this` expressions\n\nType: `String`\n\nValues: String value used for context local declaration\n\n#### Example\n\n```js\n\"safeContextKeyword\": \"that\"\n```\n\n##### Valid\n\n```js\nvar that = this;\n```\n\n##### Invalid\n\n```js\nvar _this = this;\n```\n\n### requireDotNotation\n\nRequires member expressions to use dot notation when possible\n\nType: `Boolean`\n\nValues: `true`\n\n#### Example\n\n```js\n\"requireDotNotation\": true\n```\n\n##### Valid\n\n```js\nvar a = b[c];\nvar a = b.c;\nvar a = b[c.d];\nvar a = b[1];\nvar a = b['while']; //reserved word\n```\n\n##### Invalid\n\n```js\nvar a = b['c'];\n```\n\n### validateJSDoc\n\nEnables JSDoc validation.\n\nType: `Object`\n\nValues:\n\n - \"checkParamNames\" ensures param names in jsdoc and in function declaration are equal\n - \"requireParamTypes\" ensures params in jsdoc contains type\n - \"checkRedundantParams\" reports redundant params in jsdoc\n\n#### Example\n\n```js\n\"validateJSDoc\": {\n    \"checkParamNames\": true,\n    \"checkRedundantParams\": true,\n    \"requireParamTypes\": true\n}\n```\n\n##### Valid\n\n```js\n/**\n * Adds style error to the list\n *\n * @param {String} message\n * @param {Number|Object} line\n * @param {Number} [column]\n */\nadd: function(message, line, column) {\n}\n```\n\n##### Invalid\n\n```js\n/**\n * Adds style error to the list\n *\n * @param {String} message\n * @param {Number|Object} line\n * @param {Number} [column]\n */\nadd: function() {\n}\n```\n\n### excludeFiles\n\nDisables style checking for specified paths.\n\nType: `Array`\n\nValues: Array of file matching patterns\n\n#### Example\n\n```js\n\"excludeFiles\": [\"node_modules/**\"]\n```\n\n### additionalRules\n\nPath to load additional rules\n\nType: `Array`\n\nValues: Array of file matching patterns\n\n#### Example\n\n```js\n\"additionalRules\": [\"project-rules/*.js\"]\n```\n\n### preset\n\nExtends defined rules with preset rules\n\nType: `String`\n\nValues: `\"jquery\"`\n\n#### Example\n\n```js\n\"preset\": \"jquery\"\n```\n\n## Browser Usage\n\nFile [jscs-browser.js](jscs-browser.js) contains browser-compatible version of `jscs`.\n\nDownload and include `jscs-browser.js` into your page.\n\n```html\n<script type=\"text/javascript\" src=\"jscs-browser.js\"></script>\n<script type=\"text/javascript\">\nvar checker = new JscsStringChecker();\nchecker.registerDefaultRules();\nchecker.configure({disallowMultipleVarDecl: true});\nvar errors = checker.checkString('var x, y = 1;');\nerrors.getErrorList().forEach(function(error) {\n    console.log(errors.explainError(error));\n});\n</script>\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mdevils/node-jscs/issues"
  },
  "_id": "jscs@1.2.3",
  "_from": "jscs@"
}
